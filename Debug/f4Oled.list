
f4Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000530c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080054d8  080054d8  000154d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c8  080056c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d0  080056d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  080056e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080056e4  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad59  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184c  00000000  00000000  0002ad95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  0002cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001cac  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085c0  00000000  00000000  0002f5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9a48  00000000  00000000  00037b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001015e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d7c  00000000  00000000  00101660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080054bc 	.word	0x080054bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080054bc 	.word	0x080054bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b972 	b.w	8000ea0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d14b      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	4615      	mov	r5, r2
 8000be6:	d967      	bls.n	8000cb8 <__udivmoddi4+0xe4>
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0720 	rsb	r7, r2, #32
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfa:	4095      	lsls	r5, r2
 8000bfc:	ea47 0803 	orr.w	r8, r7, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c0c:	fa1f fc85 	uxth.w	ip, r5
 8000c10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c18:	fb07 f10c 	mul.w	r1, r7, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x60>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c26:	f080 811b 	bcs.w	8000e60 <__udivmoddi4+0x28c>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 8118 	bls.w	8000e60 <__udivmoddi4+0x28c>
 8000c30:	3f02      	subs	r7, #2
 8000c32:	442b      	add	r3, r5
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c48:	45a4      	cmp	ip, r4
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x8c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	442c      	add	r4, r5
 8000c60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c64:	eba4 040c 	sub.w	r4, r4, ip
 8000c68:	2700      	movs	r7, #0
 8000c6a:	b11e      	cbz	r6, 8000c74 <__udivmoddi4+0xa0>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c6 4300 	strd	r4, r3, [r6]
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xbe>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80eb 	beq.w	8000e5a <__udivmoddi4+0x286>
 8000c84:	2700      	movs	r7, #0
 8000c86:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f783 	clz	r7, r3
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d147      	bne.n	8000d2a <__udivmoddi4+0x156>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd0>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fa 	bhi.w	8000e98 <__udivmoddi4+0x2c4>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa0>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xe8>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 808f 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc6:	1b49      	subs	r1, r1, r5
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	fa1f f885 	uxth.w	r8, r5
 8000cd0:	2701      	movs	r7, #1
 8000cd2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2bc>
 8000cf6:	4684      	mov	ip, r0
 8000cf8:	1a59      	subs	r1, r3, r1
 8000cfa:	b2a3      	uxth	r3, r4
 8000cfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d08:	fb08 f800 	mul.w	r8, r8, r0
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x14c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x14a>
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	f200 80b6 	bhi.w	8000e8a <__udivmoddi4+0x2b6>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	eba4 0408 	sub.w	r4, r4, r8
 8000d24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d28:	e79f      	b.n	8000c6a <__udivmoddi4+0x96>
 8000d2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d38:	fa01 f407 	lsl.w	r4, r1, r7
 8000d3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d48:	4325      	orrs	r5, r4
 8000d4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4e:	0c2c      	lsrs	r4, r5, #16
 8000d50:	fb08 3319 	mls	r3, r8, r9, r3
 8000d54:	fa1f fa8e 	uxth.w	sl, lr
 8000d58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d60:	429c      	cmp	r4, r3
 8000d62:	fa02 f207 	lsl.w	r2, r2, r7
 8000d66:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	f080 8087 	bcs.w	8000e86 <__udivmoddi4+0x2b2>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f240 8084 	bls.w	8000e86 <__udivmoddi4+0x2b2>
 8000d7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d82:	4473      	add	r3, lr
 8000d84:	1b1b      	subs	r3, r3, r4
 8000d86:	b2ad      	uxth	r5, r5
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d98:	45a2      	cmp	sl, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da4:	d26b      	bcs.n	8000e7e <__udivmoddi4+0x2aa>
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	d969      	bls.n	8000e7e <__udivmoddi4+0x2aa>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4474      	add	r4, lr
 8000dae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	eba4 040a 	sub.w	r4, r4, sl
 8000dba:	454c      	cmp	r4, r9
 8000dbc:	46c2      	mov	sl, r8
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	d354      	bcc.n	8000e6c <__udivmoddi4+0x298>
 8000dc2:	d051      	beq.n	8000e68 <__udivmoddi4+0x294>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d069      	beq.n	8000e9c <__udivmoddi4+0x2c8>
 8000dc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000dcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	40fc      	lsrs	r4, r7
 8000dd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ddc:	e9c6 5400 	strd	r5, r4, [r6]
 8000de0:	2700      	movs	r7, #0
 8000de2:	e747      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000de4:	f1c2 0320 	rsb	r3, r2, #32
 8000de8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dec:	4095      	lsls	r5, r2
 8000dee:	fa01 f002 	lsl.w	r0, r1, r2
 8000df2:	fa21 f303 	lsr.w	r3, r1, r3
 8000df6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfa:	4338      	orrs	r0, r7
 8000dfc:	0c01      	lsrs	r1, r0, #16
 8000dfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e02:	fa1f f885 	uxth.w	r8, r5
 8000e06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb07 f308 	mul.w	r3, r7, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x256>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e20:	d22f      	bcs.n	8000e82 <__udivmoddi4+0x2ae>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d92d      	bls.n	8000e82 <__udivmoddi4+0x2ae>
 8000e26:	3f02      	subs	r7, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	b281      	uxth	r1, r0
 8000e2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb00 f308 	mul.w	r3, r0, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x27e>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e48:	d217      	bcs.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d915      	bls.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e58:	e73b      	b.n	8000cd2 <__udivmoddi4+0xfe>
 8000e5a:	4637      	mov	r7, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e709      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000e60:	4607      	mov	r7, r0
 8000e62:	e6e7      	b.n	8000c34 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x8c>
 8000e68:	4541      	cmp	r1, r8
 8000e6a:	d2ab      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e70:	eb69 020e 	sbc.w	r2, r9, lr
 8000e74:	3801      	subs	r0, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	e7a4      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7a:	4660      	mov	r0, ip
 8000e7c:	e7e9      	b.n	8000e52 <__udivmoddi4+0x27e>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	e795      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e82:	4667      	mov	r7, ip
 8000e84:	e7d1      	b.n	8000e2a <__udivmoddi4+0x256>
 8000e86:	4681      	mov	r9, r0
 8000e88:	e77c      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	442c      	add	r4, r5
 8000e8e:	e747      	b.n	8000d20 <__udivmoddi4+0x14c>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	442b      	add	r3, r5
 8000e96:	e72f      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e98:	4638      	mov	r0, r7
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xda>
 8000e9c:	4637      	mov	r7, r6
 8000e9e:	e6e9      	b.n	8000c74 <__udivmoddi4+0xa0>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f001 f8dd 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 fa73 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fb35 	bl	8001524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 fb09 	bl	80014d0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000ebe:	f000 fad9 	bl	8001474 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();  // initialise
 8000ec2:	f000 fbd5 	bl	8001670 <SSD1306_Init>

    /// lets print some string

      SSD1306_GotoXY (0,0);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fd3b 	bl	8001944 <SSD1306_GotoXY>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  int count=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  float x=20;
 8000ed2:	4bdf      	ldr	r3, [pc, #892]	; (8001250 <main+0x3a8>)
 8000ed4:	613b      	str	r3, [r7, #16]
  float y=20;
 8000ed6:	4bde      	ldr	r3, [pc, #888]	; (8001250 <main+0x3a8>)
 8000ed8:	60fb      	str	r3, [r7, #12]
  float velx=2;
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	60bb      	str	r3, [r7, #8]
  float vely=1;
 8000ee0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ee4:	607b      	str	r3, [r7, #4]
  while (1)
  {

	  if(count%120==0)
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4bda      	ldr	r3, [pc, #872]	; (8001254 <main+0x3ac>)
 8000eea:	fb83 1302 	smull	r1, r3, r3, r2
 8000eee:	4413      	add	r3, r2
 8000ef0:	1199      	asrs	r1, r3, #6
 8000ef2:	17d3      	asrs	r3, r2, #31
 8000ef4:	1ac9      	subs	r1, r1, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	1a5b      	subs	r3, r3, r1
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1ad1      	subs	r1, r2, r3
 8000f00:	2900      	cmp	r1, #0
 8000f02:	d101      	bne.n	8000f08 <main+0x60>
	  	 	 {
	  	 	 SSD1306_UpdateScreen();
 8000f04:	f000 fc78 	bl	80017f8 <SSD1306_UpdateScreen>
	  	 	 }
	 SSD1306_DrawFilledCircle(x,y,4,1);
 8000f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f10:	ee17 3a90 	vmov	r3, s15
 8000f14:	b218      	sxth	r0, r3
 8000f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	ee17 3a90 	vmov	r3, s15
 8000f22:	b219      	sxth	r1, r3
 8000f24:	2301      	movs	r3, #1
 8000f26:	2204      	movs	r2, #4
 8000f28:	f000 fe1d 	bl	8001b66 <SSD1306_DrawFilledCircle>
	 x=x+velx;
 8000f2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f38:	edc7 7a04 	vstr	s15, [r7, #16]
	 y=y+vely;
 8000f3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f48:	edc7 7a03 	vstr	s15, [r7, #12]

	 if(x>=124||x<=4)
 8000f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f50:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001258 <main+0x3b0>
 8000f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	da08      	bge.n	8000f70 <main+0xc8>
 8000f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f62:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	d80d      	bhi.n	8000f8c <main+0xe4>
		 {
		 x=x-velx;
 8000f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	edc7 7a04 	vstr	s15, [r7, #16]
	 	 velx=-velx;
 8000f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f84:	eef1 7a67 	vneg.f32	s15, s15
 8000f88:	edc7 7a02 	vstr	s15, [r7, #8]
		 }

	 if(y>=60||y<=4)
 8000f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f90:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800125c <main+0x3b4>
 8000f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	da08      	bge.n	8000fb0 <main+0x108>
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d80d      	bhi.n	8000fcc <main+0x124>
	 		 {
	 		 y=y-vely;
 8000fb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbc:	edc7 7a03 	vstr	s15, [r7, #12]
	 	 	 vely=-vely;
 8000fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc4:	eef1 7a67 	vneg.f32	s15, s15
 8000fc8:	edc7 7a01 	vstr	s15, [r7, #4]
	 		 }



	  vely=vely+9.81*.01-vely*.03;
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fa7f 	bl	80004d0 <__aeabi_f2d>
 8000fd2:	a397      	add	r3, pc, #604	; (adr r3, 8001230 <main+0x388>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff f91c 	bl	8000214 <__adddf3>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4625      	mov	r5, r4
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fa73 	bl	80004d0 <__aeabi_f2d>
 8000fea:	a393      	add	r3, pc, #588	; (adr r3, 8001238 <main+0x390>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fac6 	bl	8000580 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f908 	bl	8000210 <__aeabi_dsub>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	4618      	mov	r0, r3
 8001006:	4621      	mov	r1, r4
 8001008:	f7ff fd7c 	bl	8000b04 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	607b      	str	r3, [r7, #4]
	  velx=velx-velx*.01;
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f7ff fa5d 	bl	80004d0 <__aeabi_f2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	68b8      	ldr	r0, [r7, #8]
 800101c:	f7ff fa58 	bl	80004d0 <__aeabi_f2d>
 8001020:	a387      	add	r3, pc, #540	; (adr r3, 8001240 <main+0x398>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faab 	bl	8000580 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4620      	mov	r0, r4
 8001030:	4629      	mov	r1, r5
 8001032:	f7ff f8ed 	bl	8000210 <__aeabi_dsub>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f7ff fd61 	bl	8000b04 <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
 8001044:	60bb      	str	r3, [r7, #8]
	  if(HAL_GPIO_ReadPin(GPIOC,RU_Pin))
 8001046:	2108      	movs	r1, #8
 8001048:	4885      	ldr	r0, [pc, #532]	; (8001260 <main+0x3b8>)
 800104a:	f001 fb1b 	bl	8002684 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d052      	beq.n	80010fa <main+0x252>
	 	 {
		  	  if(count%7==0)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4b83      	ldr	r3, [pc, #524]	; (8001264 <main+0x3bc>)
 8001058:	fb83 1302 	smull	r1, r3, r3, r2
 800105c:	4413      	add	r3, r2
 800105e:	1099      	asrs	r1, r3, #2
 8001060:	17d3      	asrs	r3, r2, #31
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	460b      	mov	r3, r1
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	1ad1      	subs	r1, r2, r3
 800106c:	2900      	cmp	r1, #0
 800106e:	d130      	bne.n	80010d2 <main+0x22a>
		  	  HAL_Delay(((int)(count*(sin(count)+1)))%15);
 8001070:	6978      	ldr	r0, [r7, #20]
 8001072:	f7ff fa1b 	bl	80004ac <__aeabi_i2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff fa16 	bl	80004ac <__aeabi_i2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b10 	vmov	d0, r2, r3
 8001088:	f003 f9da 	bl	8004440 <sin>
 800108c:	ec51 0b10 	vmov	r0, r1, d0
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b74      	ldr	r3, [pc, #464]	; (8001268 <main+0x3c0>)
 8001096:	f7ff f8bd 	bl	8000214 <__adddf3>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff fa6d 	bl	8000580 <__aeabi_dmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	4618      	mov	r0, r3
 80010ac:	4621      	mov	r1, r4
 80010ae:	f7ff fd01 	bl	8000ab4 <__aeabi_d2iz>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b67      	ldr	r3, [pc, #412]	; (8001254 <main+0x3ac>)
 80010b6:	fb83 1302 	smull	r1, r3, r3, r2
 80010ba:	4413      	add	r3, r2
 80010bc:	10d9      	asrs	r1, r3, #3
 80010be:	17d3      	asrs	r3, r2, #31
 80010c0:	1ac9      	subs	r1, r1, r3
 80010c2:	460b      	mov	r3, r1
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	1ad1      	subs	r1, r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f83f 	bl	8002150 <HAL_Delay>
		  	  HAL_GPIO_TogglePin(GPIOB, AUDIO_OUT_Pin);
 80010d2:	2120      	movs	r1, #32
 80010d4:	4865      	ldr	r0, [pc, #404]	; (800126c <main+0x3c4>)
 80010d6:	f001 fb06 	bl	80026e6 <HAL_GPIO_TogglePin>
	 		 vely=vely-.1;
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f9f8 	bl	80004d0 <__aeabi_f2d>
 80010e0:	a359      	add	r3, pc, #356	; (adr r3, 8001248 <main+0x3a0>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff f893 	bl	8000210 <__aeabi_dsub>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f7ff fd07 	bl	8000b04 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	607b      	str	r3, [r7, #4]
	 	 }

	  if(HAL_GPIO_ReadPin(GPIOC,RL_Pin))
 80010fa:	2104      	movs	r1, #4
 80010fc:	4858      	ldr	r0, [pc, #352]	; (8001260 <main+0x3b8>)
 80010fe:	f001 fac1 	bl	8002684 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d049      	beq.n	800119c <main+0x2f4>
	  	 	 {
		  	  	  HAL_Delay(((int)(count*(sin(count/4)+1)))%10);
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff f9cf 	bl	80004ac <__aeabi_i2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da00      	bge.n	800111a <main+0x272>
 8001118:	3303      	adds	r3, #3
 800111a:	109b      	asrs	r3, r3, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9c5 	bl	80004ac <__aeabi_i2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	ec43 2b10 	vmov	d0, r2, r3
 800112a:	f003 f989 	bl	8004440 <sin>
 800112e:	ec51 0b10 	vmov	r0, r1, d0
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <main+0x3c0>)
 8001138:	f7ff f86c 	bl	8000214 <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fa1c 	bl	8000580 <__aeabi_dmul>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4618      	mov	r0, r3
 800114e:	4621      	mov	r1, r4
 8001150:	f7ff fcb0 	bl	8000ab4 <__aeabi_d2iz>
 8001154:	4601      	mov	r1, r0
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <main+0x3c8>)
 8001158:	fb83 2301 	smull	r2, r3, r3, r1
 800115c:	109a      	asrs	r2, r3, #2
 800115e:	17cb      	asrs	r3, r1, #31
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	1aca      	subs	r2, r1, r3
 800116c:	4613      	mov	r3, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f000 ffee 	bl	8002150 <HAL_Delay>
		  		  HAL_GPIO_TogglePin(GPIOB, AUDIO_OUT_Pin);
 8001174:	2120      	movs	r1, #32
 8001176:	483d      	ldr	r0, [pc, #244]	; (800126c <main+0x3c4>)
 8001178:	f001 fab5 	bl	80026e6 <HAL_GPIO_TogglePin>
	  	 		 velx=velx-.1;
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff f9a7 	bl	80004d0 <__aeabi_f2d>
 8001182:	a331      	add	r3, pc, #196	; (adr r3, 8001248 <main+0x3a0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f842 	bl	8000210 <__aeabi_dsub>
 800118c:	4603      	mov	r3, r0
 800118e:	460c      	mov	r4, r1
 8001190:	4618      	mov	r0, r3
 8001192:	4621      	mov	r1, r4
 8001194:	f7ff fcb6 	bl	8000b04 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	60bb      	str	r3, [r7, #8]
	  	 	 }

	  if(HAL_GPIO_ReadPin(GPIOA,RR_Pin))
 800119c:	2102      	movs	r1, #2
 800119e:	4835      	ldr	r0, [pc, #212]	; (8001274 <main+0x3cc>)
 80011a0:	f001 fa70 	bl	8002684 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06b      	beq.n	8001282 <main+0x3da>
	  	  	 	 {

		  	  	  	  HAL_Delay(((int)(count*(cos(count*6)+1)))%4);
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff f97e 	bl	80004ac <__aeabi_i2d>
 80011b0:	4604      	mov	r4, r0
 80011b2:	460d      	mov	r5, r1
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f974 	bl	80004ac <__aeabi_i2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b10 	vmov	d0, r2, r3
 80011cc:	f003 f8f4 	bl	80043b8 <cos>
 80011d0:	ec51 0b10 	vmov	r0, r1, d0
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <main+0x3c0>)
 80011da:	f7ff f81b 	bl	8000214 <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff f9cb 	bl	8000580 <__aeabi_dmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fc5f 	bl	8000ab4 <__aeabi_d2iz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	425a      	negs	r2, r3
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	bf58      	it	pl
 8001204:	4253      	negpl	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 ffa2 	bl	8002150 <HAL_Delay>
		  		  	  HAL_GPIO_TogglePin(GPIOB, AUDIO_OUT_Pin);
 800120c:	2120      	movs	r1, #32
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <main+0x3c4>)
 8001210:	f001 fa69 	bl	80026e6 <HAL_GPIO_TogglePin>

	  	  	 		 velx=velx+.1;
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff f95b 	bl	80004d0 <__aeabi_f2d>
 800121a:	a30b      	add	r3, pc, #44	; (adr r3, 8001248 <main+0x3a0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7fe fff8 	bl	8000214 <__adddf3>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4618      	mov	r0, r3
 800122a:	e025      	b.n	8001278 <main+0x3d0>
 800122c:	f3af 8000 	nop.w
 8001230:	e3bcd35b 	.word	0xe3bcd35b
 8001234:	3fb91d14 	.word	0x3fb91d14
 8001238:	eb851eb8 	.word	0xeb851eb8
 800123c:	3f9eb851 	.word	0x3f9eb851
 8001240:	47ae147b 	.word	0x47ae147b
 8001244:	3f847ae1 	.word	0x3f847ae1
 8001248:	9999999a 	.word	0x9999999a
 800124c:	3fb99999 	.word	0x3fb99999
 8001250:	41a00000 	.word	0x41a00000
 8001254:	88888889 	.word	0x88888889
 8001258:	42f80000 	.word	0x42f80000
 800125c:	42700000 	.word	0x42700000
 8001260:	40020800 	.word	0x40020800
 8001264:	92492493 	.word	0x92492493
 8001268:	3ff00000 	.word	0x3ff00000
 800126c:	40020400 	.word	0x40020400
 8001270:	66666667 	.word	0x66666667
 8001274:	40020000 	.word	0x40020000
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fc43 	bl	8000b04 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	60bb      	str	r3, [r7, #8]
	  	  	 	 }

	  if(HAL_GPIO_ReadPin(GPIOA,RD_Pin))
 8001282:	2101      	movs	r1, #1
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <main+0x4d8>)
 8001286:	f001 f9fd 	bl	8002684 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d053      	beq.n	8001338 <main+0x490>
	  	  	 	 {
		  	  	  	  if(count%24==0)
 8001290:	6979      	ldr	r1, [r7, #20]
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <main+0x4dc>)
 8001294:	fb83 2301 	smull	r2, r3, r3, r1
 8001298:	109a      	asrs	r2, r3, #2
 800129a:	17cb      	asrs	r3, r1, #31
 800129c:	1ad2      	subs	r2, r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	1aca      	subs	r2, r1, r3
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d131      	bne.n	8001310 <main+0x468>
		  	  	  	  {
		  	  	  	  HAL_Delay(((int)(count*(sin(count*16)+1)))%5);
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff f8fd 	bl	80004ac <__aeabi_i2d>
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8f6 	bl	80004ac <__aeabi_i2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b10 	vmov	d0, r2, r3
 80012c8:	f003 f8ba 	bl	8004440 <sin>
 80012cc:	ec51 0b10 	vmov	r0, r1, d0
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <main+0x4e0>)
 80012d6:	f7fe ff9d 	bl	8000214 <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff f94d 	bl	8000580 <__aeabi_dmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	460c      	mov	r4, r1
 80012ea:	4618      	mov	r0, r3
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff fbe1 	bl	8000ab4 <__aeabi_d2iz>
 80012f2:	4601      	mov	r1, r0
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <main+0x4e4>)
 80012f6:	fb83 2301 	smull	r2, r3, r3, r1
 80012fa:	105a      	asrs	r2, r3, #1
 80012fc:	17cb      	asrs	r3, r1, #31
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	1aca      	subs	r2, r1, r3
 8001308:	4613      	mov	r3, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f000 ff20 	bl	8002150 <HAL_Delay>
		  	  	  	  }
		  		  	  HAL_GPIO_TogglePin(GPIOB, AUDIO_OUT_Pin);
 8001310:	2120      	movs	r1, #32
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <main+0x4e8>)
 8001314:	f001 f9e7 	bl	80026e6 <HAL_GPIO_TogglePin>
	  	  	 		 vely=vely+.1;
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff f8d9 	bl	80004d0 <__aeabi_f2d>
 800131e:	a316      	add	r3, pc, #88	; (adr r3, 8001378 <main+0x4d0>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ff76 	bl	8000214 <__adddf3>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	f7ff fbe8 	bl	8000b04 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	607b      	str	r3, [r7, #4]
	  	  	 	 }


	  if(count%220==0)
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <main+0x4ec>)
 800133c:	fb83 1302 	smull	r1, r3, r3, r2
 8001340:	10d9      	asrs	r1, r3, #3
 8001342:	17d3      	asrs	r3, r2, #31
 8001344:	1acb      	subs	r3, r1, r3
 8001346:	21dc      	movs	r1, #220	; 0xdc
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <main+0x4ae>
	 	 {
	 	 SSD1306_Clear();
 8001352:	f000 fce2 	bl	8001d1a <SSD1306_Clear>
	 	 }
	  count=(count+1)%560;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <main+0x4f0>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	441a      	add	r2, r3
 8001362:	1251      	asrs	r1, r2, #9
 8001364:	17da      	asrs	r2, r3, #31
 8001366:	1a8a      	subs	r2, r1, r2
 8001368:	f44f 710c 	mov.w	r1, #560	; 0x230
 800136c:	fb01 f202 	mul.w	r2, r1, r2
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	617b      	str	r3, [r7, #20]
	  if(count%120==0)
 8001374:	e5b7      	b.n	8000ee6 <main+0x3e>
 8001376:	bf00      	nop
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fb99999 	.word	0x3fb99999
 8001380:	40020000 	.word	0x40020000
 8001384:	2aaaaaab 	.word	0x2aaaaaab
 8001388:	3ff00000 	.word	0x3ff00000
 800138c:	66666667 	.word	0x66666667
 8001390:	40020400 	.word	0x40020400
 8001394:	094f2095 	.word	0x094f2095
 8001398:	ea0ea0eb 	.word	0xea0ea0eb

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2234      	movs	r2, #52	; 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 f87e 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <SystemClock_Config+0xd0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <SystemClock_Config+0xd0>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <SystemClock_Config+0xd0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <SystemClock_Config+0xd4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <SystemClock_Config+0xd4>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <SystemClock_Config+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001404:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001410:	2308      	movs	r3, #8
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001418:	2302      	movs	r3, #2
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f99f 	bl	800376c <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001434:	f000 f914 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800143c:	2303      	movs	r3, #3
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fecf 	bl	80031f8 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001460:	f000 f8fe 	bl	8001660 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	; 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C2_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C2_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C2_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C2_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C2_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C2_Init+0x50>)
 80014b2:	f001 f933 	bl	800271c <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 f8d0 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000430 	.word	0x20000430
 80014c8:	40005800 	.word	0x40005800
 80014cc:	00061a80 	.word	0x00061a80

080014d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001508:	f002 fb8a 	bl	8003c20 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f8a5 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000484 	.word	0x20000484
 8001520:	40004400 	.word	0x40004400

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <MX_GPIO_Init+0x128>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a42      	ldr	r2, [pc, #264]	; (800164c <MX_GPIO_Init+0x128>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <MX_GPIO_Init+0x128>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <MX_GPIO_Init+0x128>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a3b      	ldr	r2, [pc, #236]	; (800164c <MX_GPIO_Init+0x128>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <MX_GPIO_Init+0x128>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <MX_GPIO_Init+0x128>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a34      	ldr	r2, [pc, #208]	; (800164c <MX_GPIO_Init+0x128>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <MX_GPIO_Init+0x128>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <MX_GPIO_Init+0x128>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <MX_GPIO_Init+0x128>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <MX_GPIO_Init+0x128>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	4828      	ldr	r0, [pc, #160]	; (8001650 <MX_GPIO_Init+0x12c>)
 80015b0:	f001 f880 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_OUT_GPIO_Port, AUDIO_OUT_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2120      	movs	r1, #32
 80015b8:	4826      	ldr	r0, [pc, #152]	; (8001654 <MX_GPIO_Init+0x130>)
 80015ba:	f001 f87b 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_GPIO_Init+0x134>)
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4822      	ldr	r0, [pc, #136]	; (800165c <MX_GPIO_Init+0x138>)
 80015d4:	f000 fec4 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LU_Pin LL_Pin RL_Pin RU_Pin */
  GPIO_InitStruct.Pin = LU_Pin|LL_Pin|RL_Pin|RU_Pin;
 80015d8:	230f      	movs	r3, #15
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_GPIO_Init+0x138>)
 80015ec:	f000 feb8 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin RR_Pin LD_Pin LR_Pin */
  GPIO_InitStruct.Pin = RD_Pin|RR_Pin|LD_Pin|LR_Pin;
 80015f0:	f240 4313 	movw	r3, #1043	; 0x413
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0x12c>)
 8001606:	f000 feab 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160a:	2320      	movs	r3, #32
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <MX_GPIO_Init+0x12c>)
 8001622:	f000 fe9d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_OUT_Pin */
  GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001626:	2320      	movs	r3, #32
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_GPIO_Init+0x130>)
 800163e:	f000 fe8f 	bl	8002360 <HAL_GPIO_Init>

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	10210000 	.word	0x10210000
 800165c:	40020800 	.word	0x40020800

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001676:	f000 fb59 	bl	8001d2c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800167a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800167e:	2201      	movs	r2, #1
 8001680:	2178      	movs	r1, #120	; 0x78
 8001682:	485b      	ldr	r0, [pc, #364]	; (80017f0 <SSD1306_Init+0x180>)
 8001684:	f001 fa80 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800168e:	2300      	movs	r3, #0
 8001690:	e0a9      	b.n	80017e6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001692:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001696:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001698:	e002      	b.n	80016a0 <SSD1306_Init+0x30>
		p--;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3b01      	subs	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80016a6:	22ae      	movs	r2, #174	; 0xae
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	; 0x78
 80016ac:	f000 fb9a 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80016b0:	2220      	movs	r2, #32
 80016b2:	2100      	movs	r1, #0
 80016b4:	2078      	movs	r0, #120	; 0x78
 80016b6:	f000 fb95 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016ba:	2210      	movs	r2, #16
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	; 0x78
 80016c0:	f000 fb90 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016c4:	22b0      	movs	r2, #176	; 0xb0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f000 fb8b 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016ce:	22c8      	movs	r2, #200	; 0xc8
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	; 0x78
 80016d4:	f000 fb86 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2078      	movs	r0, #120	; 0x78
 80016de:	f000 fb81 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016e2:	2210      	movs	r2, #16
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	; 0x78
 80016e8:	f000 fb7c 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	; 0x78
 80016f2:	f000 fb77 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016f6:	2281      	movs	r2, #129	; 0x81
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 fb72 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001700:	22ff      	movs	r2, #255	; 0xff
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	; 0x78
 8001706:	f000 fb6d 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800170a:	22a1      	movs	r2, #161	; 0xa1
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 fb68 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001714:	22a6      	movs	r2, #166	; 0xa6
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 fb63 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800171e:	22a8      	movs	r2, #168	; 0xa8
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 fb5e 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001728:	223f      	movs	r2, #63	; 0x3f
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f000 fb59 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001732:	22a4      	movs	r2, #164	; 0xa4
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 fb54 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800173c:	22d3      	movs	r2, #211	; 0xd3
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	; 0x78
 8001742:	f000 fb4f 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 fb4a 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001750:	22d5      	movs	r2, #213	; 0xd5
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 fb45 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800175a:	22f0      	movs	r2, #240	; 0xf0
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 fb40 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001764:	22d9      	movs	r2, #217	; 0xd9
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 fb3b 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800176e:	2222      	movs	r2, #34	; 0x22
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fb36 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001778:	22da      	movs	r2, #218	; 0xda
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fb31 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001782:	2212      	movs	r2, #18
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 fb2c 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800178c:	22db      	movs	r2, #219	; 0xdb
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f000 fb27 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001796:	2220      	movs	r2, #32
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fb22 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017a0:	228d      	movs	r2, #141	; 0x8d
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 fb1d 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017aa:	2214      	movs	r2, #20
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fb18 	bl	8001de4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017b4:	22af      	movs	r2, #175	; 0xaf
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fb13 	bl	8001de4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017be:	222e      	movs	r2, #46	; 0x2e
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fb0e 	bl	8001de4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f843 	bl	8001854 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80017ce:	f000 f813 	bl	80017f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <SSD1306_Init+0x184>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SSD1306_Init+0x184>)
 80017da:	2200      	movs	r2, #0
 80017dc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SSD1306_Init+0x184>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000430 	.word	0x20000430
 80017f4:	20000428 	.word	0x20000428

080017f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	e01d      	b.n	8001840 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	3b50      	subs	r3, #80	; 0x50
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	2078      	movs	r0, #120	; 0x78
 8001810:	f000 fae8 	bl	8001de4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2078      	movs	r0, #120	; 0x78
 800181a:	f000 fae3 	bl	8001de4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800181e:	2210      	movs	r2, #16
 8001820:	2100      	movs	r1, #0
 8001822:	2078      	movs	r0, #120	; 0x78
 8001824:	f000 fade 	bl	8001de4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <SSD1306_UpdateScreen+0x58>)
 800182e:	441a      	add	r2, r3
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	2078      	movs	r0, #120	; 0x78
 8001836:	f000 fa8d 	bl	8001d54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b07      	cmp	r3, #7
 8001844:	d9de      	bls.n	8001804 <SSD1306_UpdateScreen+0xc>
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000028 	.word	0x20000028

08001854 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <SSD1306_Fill+0x14>
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <SSD1306_Fill+0x16>
 8001868:	23ff      	movs	r3, #255	; 0xff
 800186a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186e:	4619      	mov	r1, r3
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <SSD1306_Fill+0x2c>)
 8001872:	f003 fe1b 	bl	80054ac <memset>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000028 	.word	0x20000028

08001884 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	460b      	mov	r3, r1
 8001890:	80bb      	strh	r3, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	70fb      	strb	r3, [r7, #3]
	if (
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b7f      	cmp	r3, #127	; 0x7f
 800189a:	d848      	bhi.n	800192e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	2b3f      	cmp	r3, #63	; 0x3f
 80018a0:	d845      	bhi.n	800192e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <SSD1306_DrawPixel+0xb8>)
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d11a      	bne.n	80018f4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	b298      	uxth	r0, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	01db      	lsls	r3, r3, #7
 80018ca:	4413      	add	r3, r2
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <SSD1306_DrawPixel+0xbc>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b259      	sxtb	r1, r3
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	4603      	mov	r3, r0
 80018e8:	01db      	lsls	r3, r3, #7
 80018ea:	4413      	add	r3, r2
 80018ec:	b2c9      	uxtb	r1, r1
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <SSD1306_DrawPixel+0xbc>)
 80018f0:	54d1      	strb	r1, [r2, r3]
 80018f2:	e01d      	b.n	8001930 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	b298      	uxth	r0, r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4413      	add	r3, r2
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <SSD1306_DrawPixel+0xbc>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	b25a      	sxtb	r2, r3
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	b25b      	sxtb	r3, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4013      	ands	r3, r2
 800191c:	b259      	sxtb	r1, r3
 800191e:	88fa      	ldrh	r2, [r7, #6]
 8001920:	4603      	mov	r3, r0
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	4413      	add	r3, r2
 8001926:	b2c9      	uxtb	r1, r1
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SSD1306_DrawPixel+0xbc>)
 800192a:	54d1      	strb	r1, [r2, r3]
 800192c:	e000      	b.n	8001930 <SSD1306_DrawPixel+0xac>
		return;
 800192e:	bf00      	nop
	}
}
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000428 	.word	0x20000428
 8001940:	20000028 	.word	0x20000028

08001944 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	80fb      	strh	r3, [r7, #6]
 8001950:	4613      	mov	r3, r2
 8001952:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <SSD1306_GotoXY+0x28>)
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <SSD1306_GotoXY+0x28>)
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	8053      	strh	r3, [r2, #2]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	20000428 	.word	0x20000428

08001970 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	80fb      	strh	r3, [r7, #6]
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b7f      	cmp	r3, #127	; 0x7f
 8001992:	d901      	bls.n	8001998 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001994:	237f      	movs	r3, #127	; 0x7f
 8001996:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	2b7f      	cmp	r3, #127	; 0x7f
 800199c:	d901      	bls.n	80019a2 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800199e:	237f      	movs	r3, #127	; 0x7f
 80019a0:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	2b3f      	cmp	r3, #63	; 0x3f
 80019a6:	d901      	bls.n	80019ac <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80019a8:	233f      	movs	r3, #63	; 0x3f
 80019aa:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80019ac:	883b      	ldrh	r3, [r7, #0]
 80019ae:	2b3f      	cmp	r3, #63	; 0x3f
 80019b0:	d901      	bls.n	80019b6 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80019b2:	233f      	movs	r3, #63	; 0x3f
 80019b4:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d205      	bcs.n	80019ca <SSD1306_DrawLine+0x5a>
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	e004      	b.n	80019d4 <SSD1306_DrawLine+0x64>
 80019ca:	88fa      	ldrh	r2, [r7, #6]
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80019d6:	88ba      	ldrh	r2, [r7, #4]
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d205      	bcs.n	80019ea <SSD1306_DrawLine+0x7a>
 80019de:	883a      	ldrh	r2, [r7, #0]
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	e004      	b.n	80019f4 <SSD1306_DrawLine+0x84>
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d201      	bcs.n	8001a02 <SSD1306_DrawLine+0x92>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e001      	b.n	8001a06 <SSD1306_DrawLine+0x96>
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001a08:	88ba      	ldrh	r2, [r7, #4]
 8001a0a:	883b      	ldrh	r3, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d201      	bcs.n	8001a14 <SSD1306_DrawLine+0xa4>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e001      	b.n	8001a18 <SSD1306_DrawLine+0xa8>
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
 8001a18:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001a1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dd06      	ble.n	8001a34 <SSD1306_DrawLine+0xc4>
 8001a26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	4413      	add	r3, r2
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	e006      	b.n	8001a42 <SSD1306_DrawLine+0xd2>
 8001a34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a38:	425b      	negs	r3, r3
 8001a3a:	0fda      	lsrs	r2, r3, #31
 8001a3c:	4413      	add	r3, r2
 8001a3e:	105b      	asrs	r3, r3, #1
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001a44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d129      	bne.n	8001aa0 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001a4c:	883a      	ldrh	r2, [r7, #0]
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d205      	bcs.n	8001a60 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a5c:	893b      	ldrh	r3, [r7, #8]
 8001a5e:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d205      	bcs.n	8001a74 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a70:	893b      	ldrh	r3, [r7, #8]
 8001a72:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	82bb      	strh	r3, [r7, #20]
 8001a78:	e00c      	b.n	8001a94 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001a7a:	8ab9      	ldrh	r1, [r7, #20]
 8001a7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fefe 	bl	8001884 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001a88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	82bb      	strh	r3, [r7, #20]
 8001a94:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a98:	883b      	ldrh	r3, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dded      	ble.n	8001a7a <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001a9e:	e05f      	b.n	8001b60 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001aa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d129      	bne.n	8001afc <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001aa8:	883a      	ldrh	r2, [r7, #0]
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d205      	bcs.n	8001abc <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001ab0:	883b      	ldrh	r3, [r7, #0]
 8001ab2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001ab8:	893b      	ldrh	r3, [r7, #8]
 8001aba:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d205      	bcs.n	8001ad0 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001acc:	893b      	ldrh	r3, [r7, #8]
 8001ace:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	82bb      	strh	r3, [r7, #20]
 8001ad4:	e00c      	b.n	8001af0 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001ad6:	8abb      	ldrh	r3, [r7, #20]
 8001ad8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001adc:	88b9      	ldrh	r1, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fed0 	bl	8001884 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001ae4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	82bb      	strh	r3, [r7, #20]
 8001af0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dded      	ble.n	8001ad6 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001afa:	e031      	b.n	8001b60 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001afc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b00:	88b9      	ldrh	r1, [r7, #4]
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff febd 	bl	8001884 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d103      	bne.n	8001b1a <SSD1306_DrawLine+0x1aa>
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d021      	beq.n	8001b5e <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001b1a:	8afb      	ldrh	r3, [r7, #22]
 8001b1c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001b1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b26:	425b      	negs	r3, r3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dd08      	ble.n	8001b3e <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001b2c:	8afa      	ldrh	r2, [r7, #22]
 8001b2e:	8a3b      	ldrh	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001b36:	89fa      	ldrh	r2, [r7, #14]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001b3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dad8      	bge.n	8001afc <SSD1306_DrawLine+0x18c>
			err += dx;
 8001b4a:	8afa      	ldrh	r2, [r7, #22]
 8001b4c:	8a7b      	ldrh	r3, [r7, #18]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b54:	89ba      	ldrh	r2, [r7, #12]
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001b5c:	e7ce      	b.n	8001afc <SSD1306_DrawLine+0x18c>
			break;
 8001b5e:	bf00      	nop
		} 
	}
}
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}

08001b66 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001b66:	b590      	push	{r4, r7, lr}
 8001b68:	b089      	sub	sp, #36	; 0x24
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	4608      	mov	r0, r1
 8001b70:	4611      	mov	r1, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	4623      	mov	r3, r4
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80bb      	strh	r3, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	f1c3 0301 	rsb	r3, r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	461a      	mov	r2, r3
 8001b96:	03d2      	lsls	r2, r2, #15
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001ba8:	88f8      	ldrh	r0, [r7, #6]
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	787a      	ldrb	r2, [r7, #1]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff fe65 	bl	8001884 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001bba:	88f8      	ldrh	r0, [r7, #6]
 8001bbc:	88ba      	ldrh	r2, [r7, #4]
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	787a      	ldrb	r2, [r7, #1]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff fe5c 	bl	8001884 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	88b9      	ldrh	r1, [r7, #4]
 8001bd6:	787a      	ldrb	r2, [r7, #1]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fe53 	bl	8001884 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	88b9      	ldrh	r1, [r7, #4]
 8001be8:	787a      	ldrb	r2, [r7, #1]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fe4a 	bl	8001884 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	88b9      	ldrh	r1, [r7, #4]
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	88bc      	ldrh	r4, [r7, #4]
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4623      	mov	r3, r4
 8001c0a:	f7ff feb1 	bl	8001970 <SSD1306_DrawLine>

    while (x < y) {
 8001c0e:	e079      	b.n	8001d04 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001c10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0e      	blt.n	8001c36 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001c24:	8a7b      	ldrh	r3, [r7, #18]
 8001c26:	3302      	adds	r3, #2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001c2c:	8afa      	ldrh	r2, [r7, #22]
 8001c2e:	8a7b      	ldrh	r3, [r7, #18]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001c36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001c42:	8abb      	ldrh	r3, [r7, #20]
 8001c44:	3302      	adds	r3, #2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001c4a:	8afa      	ldrh	r2, [r7, #22]
 8001c4c:	8abb      	ldrh	r3, [r7, #20]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	8a3b      	ldrh	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b298      	uxth	r0, r3
 8001c5c:	88ba      	ldrh	r2, [r7, #4]
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	4413      	add	r3, r2
 8001c62:	b299      	uxth	r1, r3
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	8a3b      	ldrh	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29c      	uxth	r4, r3
 8001c6c:	88ba      	ldrh	r2, [r7, #4]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4413      	add	r3, r2
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	f7ff fe78 	bl	8001970 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	8a3b      	ldrh	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	b298      	uxth	r0, r3
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	8a3b      	ldrh	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	b29c      	uxth	r4, r3
 8001c98:	88ba      	ldrh	r2, [r7, #4]
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	f7ff fe62 	bl	8001970 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b298      	uxth	r0, r3
 8001cb4:	88ba      	ldrh	r2, [r7, #4]
 8001cb6:	8a3b      	ldrh	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	b29c      	uxth	r4, r3
 8001cc4:	88ba      	ldrh	r2, [r7, #4]
 8001cc6:	8a3b      	ldrh	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	f7ff fe4c 	bl	8001970 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	b29c      	uxth	r4, r3
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	8a3b      	ldrh	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	4622      	mov	r2, r4
 8001d00:	f7ff fe36 	bl	8001970 <SSD1306_DrawLine>
    while (x < y) {
 8001d04:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f6ff af7f 	blt.w	8001c10 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fd98 	bl	8001854 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d24:	f7ff fd68 	bl	80017f8 <SSD1306_UpdateScreen>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <ssd1306_I2C_Init+0x24>)
 8001d34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d36:	e002      	b.n	8001d3e <ssd1306_I2C_Init+0x12>
		p--;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	0003d090 	.word	0x0003d090

08001d54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b0c7      	sub	sp, #284	; 0x11c
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4639      	mov	r1, r7
 8001d60:	600a      	str	r2, [r1, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	4622      	mov	r2, r4
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	1dbb      	adds	r3, r7, #6
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	460a      	mov	r2, r1
 8001d74:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	1dba      	adds	r2, r7, #6
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d86:	e010      	b.n	8001daa <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001d88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d8c:	463a      	mov	r2, r7
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	441a      	add	r2, r3
 8001d92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d96:	3301      	adds	r3, #1
 8001d98:	7811      	ldrb	r1, [r2, #0]
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001da0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001da4:	3301      	adds	r3, #1
 8001da6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001daa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	1d3a      	adds	r2, r7, #4
 8001db2:	8812      	ldrh	r2, [r2, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8e7      	bhi.n	8001d88 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b298      	uxth	r0, r3
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	230a      	movs	r3, #10
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <ssd1306_I2C_WriteMulti+0x8c>)
 8001dd2:	f000 fddb 	bl	800298c <HAL_I2C_Master_Transmit>
}
 8001dd6:	bf00      	nop
 8001dd8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000430 	.word	0x20000430

08001de4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	460b      	mov	r3, r1
 8001df0:	71bb      	strb	r3, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dfa:	797b      	ldrb	r3, [r7, #5]
 8001dfc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	b299      	uxth	r1, r3
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	230a      	movs	r3, #10
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <ssd1306_I2C_Write+0x38>)
 8001e0e:	f000 fdbd 	bl	800298c <HAL_I2C_Master_Transmit>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000430 	.word	0x20000430

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e5e:	2007      	movs	r0, #7
 8001e60:	f000 fa4a 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_I2C_MspInit+0x84>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12c      	bne.n	8001eec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001eae:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <HAL_I2C_MspInit+0x8c>)
 8001ecc:	f000 fa48 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_I2C_MspInit+0x88>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0x84>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d12b      	bne.n	8001f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_UART_MspInit+0x88>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_UART_MspInit+0x8c>)
 8001f76:	f000 f9f3 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 f894 	bl	8002110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <SystemInit+0x28>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <SystemInit+0x28>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SystemInit+0x28>)
 8002002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002006:	609a      	str	r2, [r3, #8]
#endif
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002050 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800201c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800201e:	e003      	b.n	8002028 <LoopCopyDataInit>

08002020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002026:	3104      	adds	r1, #4

08002028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800202c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800202e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002030:	d3f6      	bcc.n	8002020 <CopyDataInit>
  ldr  r2, =_sbss
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002034:	e002      	b.n	800203c <LoopFillZerobss>

08002036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002038:	f842 3b04 	str.w	r3, [r2], #4

0800203c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800203e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002040:	d3f9      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002042:	f7ff ffd3 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002046:	f003 fa0d 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7fe ff2d 	bl	8000ea8 <main>
  bx  lr    
 800204e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002054:	080056d8 	.word	0x080056d8
  ldr  r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800205c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002060:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002064:	200004c8 	.word	0x200004c8

08002068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <HAL_Init+0x40>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_Init+0x40>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_Init+0x40>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <HAL_Init+0x40>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002094:	2003      	movs	r0, #3
 8002096:	f000 f92f 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f808 	bl	80020b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a0:	f7ff febe 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x54>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f939 	bl	8002346 <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00e      	b.n	80020fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d80a      	bhi.n	80020fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f000 f90f 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <HAL_InitTick+0x5c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000000 	.word	0x20000000
 8002108:	20000008 	.word	0x20000008
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_IncTick+0x24>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000008 	.word	0x20000008
 8002134:	200004c4 	.word	0x200004c4

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200004c4 	.word	0x200004c4

08002150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff ffee 	bl	8002138 <HAL_GetTick>
 800215c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d005      	beq.n	8002176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_Delay+0x40>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002176:	bf00      	nop
 8002178:	f7ff ffde 	bl	8002138 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	429a      	cmp	r2, r3
 8002186:	d8f7      	bhi.n	8002178 <HAL_Delay+0x28>
  {
  }
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000008 	.word	0x20000008

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff5c 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffb0 	bl	80022b4 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e165      	b.n	8002648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8154 	bne.w	8002642 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d00b      	beq.n	80023ba <HAL_GPIO_Init+0x5a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0xfc>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ae 	beq.w	8002642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b5c      	ldr	r3, [pc, #368]	; (800265c <HAL_GPIO_Init+0x2fc>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_GPIO_Init+0x2fc>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_GPIO_Init+0x2fc>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002502:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_GPIO_Init+0x300>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_GPIO_Init+0x304>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_GPIO_Init+0x308>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_GPIO_Init+0x30c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_GPIO_Init+0x310>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_GPIO_Init+0x314>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x20a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_GPIO_Init+0x318>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x206>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a48      	ldr	r2, [pc, #288]	; (800267c <HAL_GPIO_Init+0x31c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x202>
 800255e:	2306      	movs	r3, #6
 8002560:	e00c      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002562:	2307      	movs	r3, #7
 8002564:	e00a      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002566:	2305      	movs	r3, #5
 8002568:	e008      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800256a:	2304      	movs	r3, #4
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <HAL_GPIO_Init+0x21c>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x21c>
 800257a:	2300      	movs	r3, #0
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f002 0203 	and.w	r2, r2, #3
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4093      	lsls	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258c:	4934      	ldr	r1, [pc, #208]	; (8002660 <HAL_GPIO_Init+0x300>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_GPIO_Init+0x320>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025be:	4a30      	ldr	r2, [pc, #192]	; (8002680 <HAL_GPIO_Init+0x320>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_GPIO_Init+0x320>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_GPIO_Init+0x320>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_GPIO_Init+0x320>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002612:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_GPIO_Init+0x320>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_GPIO_Init+0x320>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800263c:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_GPIO_Init+0x320>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	f67f ae96 	bls.w	800237c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	401a      	ands	r2, r3
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d104      	bne.n	800270a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	041a      	lsls	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002708:	e002      	b.n	8002710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e11f      	b.n	800296e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fb94 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f000 fe2c 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a7b      	ldr	r2, [pc, #492]	; (8002978 <HAL_I2C_Init+0x25c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_I2C_Init+0x260>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a77      	ldr	r2, [pc, #476]	; (8002980 <HAL_I2C_Init+0x264>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0db      	b.n	800296e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_I2C_Init+0x268>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a64      	ldr	r2, [pc, #400]	; (8002978 <HAL_I2C_Init+0x25c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a63      	ldr	r2, [pc, #396]	; (8002988 <HAL_I2C_Init+0x26c>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4956      	ldr	r1, [pc, #344]	; (8002978 <HAL_I2C_Init+0x25c>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d80d      	bhi.n	8002840 <HAL_I2C_Init+0x124>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b04      	cmp	r3, #4
 800283a:	bf38      	it	cc
 800283c:	2304      	movcc	r3, #4
 800283e:	e04f      	b.n	80028e0 <HAL_I2C_Init+0x1c4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d111      	bne.n	800286c <HAL_I2C_Init+0x150>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	440b      	add	r3, r1
 8002856:	fbb0 f3f3 	udiv	r3, r0, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e012      	b.n	8002892 <HAL_I2C_Init+0x176>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	0099      	lsls	r1, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Init+0x17e>
 8002896:	2301      	movs	r3, #1
 8002898:	e022      	b.n	80028e0 <HAL_I2C_Init+0x1c4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10e      	bne.n	80028c0 <HAL_I2C_Init+0x1a4>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e58      	subs	r0, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	440b      	add	r3, r1
 80028b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028be:	e00f      	b.n	80028e0 <HAL_I2C_Init+0x1c4>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	6809      	ldr	r1, [r1, #0]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800290e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6911      	ldr	r1, [r2, #16]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	000186a0 	.word	0x000186a0
 800297c:	001e847f 	.word	0x001e847f
 8002980:	003d08ff 	.word	0x003d08ff
 8002984:	431bde83 	.word	0x431bde83
 8002988:	10624dd3 	.word	0x10624dd3

0800298c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	461a      	mov	r2, r3
 8002998:	460b      	mov	r3, r1
 800299a:	817b      	strh	r3, [r7, #10]
 800299c:	4613      	mov	r3, r2
 800299e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff fbca 	bl	8002138 <HAL_GetTick>
 80029a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 80e0 	bne.w	8002b74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2319      	movs	r3, #25
 80029ba:	2201      	movs	r2, #1
 80029bc:	4970      	ldr	r1, [pc, #448]	; (8002b80 <HAL_I2C_Master_Transmit+0x1f4>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fa92 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	e0d3      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x50>
 80029d8:	2302      	movs	r3, #2
 80029da:	e0cc      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d007      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	893a      	ldrh	r2, [r7, #8]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a44:	8979      	ldrh	r1, [r7, #10]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f9ca 	bl	8002de4 <I2C_MasterRequestWrite>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08d      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a70:	e066      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fb0c 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d107      	bne.n	8002a9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06b      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11b      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x188>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d017      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	6a39      	ldr	r1, [r7, #32]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fafc 	bl	8003116 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d107      	bne.n	8002b3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e01a      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d194      	bne.n	8002a72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	00100002 	.word	0x00100002
 8002b84:	ffff0000 	.word	0xffff0000

08002b88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff face 	bl	8002138 <HAL_GetTick>
 8002b9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	f040 8110 	bne.w	8002dd0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4988      	ldr	r1, [pc, #544]	; (8002ddc <HAL_I2C_IsDeviceReady+0x254>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f994 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e103      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2C_IsDeviceReady+0x50>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0fc      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d007      	beq.n	8002bfe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2224      	movs	r2, #36	; 0x24
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_I2C_IsDeviceReady+0x258>)
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f952 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0b6      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c72:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c74:	f7ff fa60 	bl	8002138 <HAL_GetTick>
 8002c78:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ca8:	e025      	b.n	8002cf6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7ff fa45 	bl	8002138 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <HAL_I2C_IsDeviceReady+0x138>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	22a0      	movs	r2, #160	; 0xa0
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002d00:	d005      	beq.n	8002d0e <HAL_I2C_IsDeviceReady+0x186>
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_I2C_IsDeviceReady+0x186>
 8002d08:	7dbb      	ldrb	r3, [r7, #22]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0cd      	beq.n	8002caa <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d129      	bne.n	8002d78 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2319      	movs	r3, #25
 8002d50:	2201      	movs	r2, #1
 8002d52:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_I2C_IsDeviceReady+0x254>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f8c7 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e036      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e02c      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d90:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4910      	ldr	r1, [pc, #64]	; (8002ddc <HAL_I2C_IsDeviceReady+0x254>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f8a3 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e012      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f4ff af33 	bcc.w	8002c22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	460b      	mov	r3, r1
 8002df2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d006      	beq.n	8002e0e <I2C_MasterRequestWrite+0x2a>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d003      	beq.n	8002e0e <I2C_MasterRequestWrite+0x2a>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e0c:	d108      	bne.n	8002e20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e00b      	b.n	8002e38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2b12      	cmp	r3, #18
 8002e26:	d107      	bne.n	8002e38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f84f 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e035      	b.n	8002ed6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e72:	d108      	bne.n	8002e86 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e82:	611a      	str	r2, [r3, #16]
 8002e84:	e01b      	b.n	8002ebe <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	11db      	asrs	r3, r3, #7
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0306 	and.w	r3, r3, #6
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f063 030f 	orn	r3, r3, #15
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <I2C_MasterRequestWrite+0xfc>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f876 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e010      	b.n	8002ed6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <I2C_MasterRequestWrite+0x100>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f866 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	00010008 	.word	0x00010008
 8002ee4:	00010002 	.word	0x00010002

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e025      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7ff f919 	bl	8002138 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e023      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10d      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	e00c      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d0b6      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa4:	e051      	b.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d123      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d021      	beq.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7ff f897 	bl	8002138 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e00b      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d18d      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	e02d      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f878 	bl	8003198 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d021      	beq.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7ff f83d 	bl	8002138 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d1ca      	bne.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003122:	e02d      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f837 	bl	8003198 <I2C_IsAcknowledgeFailed>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e02d      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d021      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe fffc 	bl	8002138 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1ca      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d11b      	bne.n	80031e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe ff26 	bl	8002138 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe ff22 	bl	8002138 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f855 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	fa21 f303 	lsr.w	r3, r1, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fe86 	bl	80020b0 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	080054d8 	.word	0x080054d8
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4601      	mov	r1, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0a9b      	lsrs	r3, r3, #10
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	080054e8 	.word	0x080054e8

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffdc 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800340c:	4601      	mov	r1, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0b5b      	lsrs	r3, r3, #13
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4a03      	ldr	r2, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	080054e8 	.word	0x080054e8

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4bc6      	ldr	r3, [pc, #792]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	f200 817e 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x324>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_RCC_GetSysClockFreq+0x30>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	08003751 	.word	0x08003751
 8003464:	08003751 	.word	0x08003751
 8003468:	08003751 	.word	0x08003751
 800346c:	08003497 	.word	0x08003497
 8003470:	08003751 	.word	0x08003751
 8003474:	08003751 	.word	0x08003751
 8003478:	08003751 	.word	0x08003751
 800347c:	0800349d 	.word	0x0800349d
 8003480:	08003751 	.word	0x08003751
 8003484:	08003751 	.word	0x08003751
 8003488:	08003751 	.word	0x08003751
 800348c:	080035f9 	.word	0x080035f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4bb4      	ldr	r3, [pc, #720]	; (8003764 <HAL_RCC_GetSysClockFreq+0x338>)
 8003492:	613b      	str	r3, [r7, #16]
       break;
 8003494:	e15f      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4bb4      	ldr	r3, [pc, #720]	; (8003768 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003498:	613b      	str	r3, [r7, #16]
      break;
 800349a:	e15c      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4bb0      	ldr	r3, [pc, #704]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4bae      	ldr	r3, [pc, #696]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04a      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4bab      	ldr	r3, [pc, #684]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	ea03 0501 	and.w	r5, r3, r1
 80034c8:	ea04 0602 	and.w	r6, r4, r2
 80034cc:	4629      	mov	r1, r5
 80034ce:	4632      	mov	r2, r6
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	0154      	lsls	r4, r2, #5
 80034da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034de:	014b      	lsls	r3, r1, #5
 80034e0:	4619      	mov	r1, r3
 80034e2:	4622      	mov	r2, r4
 80034e4:	1b49      	subs	r1, r1, r5
 80034e6:	eb62 0206 	sbc.w	r2, r2, r6
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	f04f 0400 	mov.w	r4, #0
 80034f2:	0194      	lsls	r4, r2, #6
 80034f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034f8:	018b      	lsls	r3, r1, #6
 80034fa:	1a5b      	subs	r3, r3, r1
 80034fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	00e2      	lsls	r2, r4, #3
 800350a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800350e:	00d9      	lsls	r1, r3, #3
 8003510:	460b      	mov	r3, r1
 8003512:	4614      	mov	r4, r2
 8003514:	195b      	adds	r3, r3, r5
 8003516:	eb44 0406 	adc.w	r4, r4, r6
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	0262      	lsls	r2, r4, #9
 8003524:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003528:	0259      	lsls	r1, r3, #9
 800352a:	460b      	mov	r3, r1
 800352c:	4614      	mov	r4, r2
 800352e:	4618      	mov	r0, r3
 8003530:	4621      	mov	r1, r4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f04f 0400 	mov.w	r4, #0
 8003538:	461a      	mov	r2, r3
 800353a:	4623      	mov	r3, r4
 800353c:	f7fd fb32 	bl	8000ba4 <__aeabi_uldivmod>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e049      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	f04f 0400 	mov.w	r4, #0
 8003552:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	ea03 0501 	and.w	r5, r3, r1
 800355e:	ea04 0602 	and.w	r6, r4, r2
 8003562:	4629      	mov	r1, r5
 8003564:	4632      	mov	r2, r6
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	f04f 0400 	mov.w	r4, #0
 800356e:	0154      	lsls	r4, r2, #5
 8003570:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003574:	014b      	lsls	r3, r1, #5
 8003576:	4619      	mov	r1, r3
 8003578:	4622      	mov	r2, r4
 800357a:	1b49      	subs	r1, r1, r5
 800357c:	eb62 0206 	sbc.w	r2, r2, r6
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	0194      	lsls	r4, r2, #6
 800358a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800358e:	018b      	lsls	r3, r1, #6
 8003590:	1a5b      	subs	r3, r3, r1
 8003592:	eb64 0402 	sbc.w	r4, r4, r2
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035a4:	00d9      	lsls	r1, r3, #3
 80035a6:	460b      	mov	r3, r1
 80035a8:	4614      	mov	r4, r2
 80035aa:	195b      	adds	r3, r3, r5
 80035ac:	eb44 0406 	adc.w	r4, r4, r6
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	02a2      	lsls	r2, r4, #10
 80035ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035be:	0299      	lsls	r1, r3, #10
 80035c0:	460b      	mov	r3, r1
 80035c2:	4614      	mov	r4, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	4621      	mov	r1, r4
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	f7fd fae7 	bl	8000ba4 <__aeabi_uldivmod>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035dc:	4b60      	ldr	r3, [pc, #384]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	613b      	str	r3, [r7, #16]
      break;
 80035f6:	e0ae      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003600:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04a      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	ea03 0501 	and.w	r5, r3, r1
 8003624:	ea04 0602 	and.w	r6, r4, r2
 8003628:	4629      	mov	r1, r5
 800362a:	4632      	mov	r2, r6
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f04f 0400 	mov.w	r4, #0
 8003634:	0154      	lsls	r4, r2, #5
 8003636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800363a:	014b      	lsls	r3, r1, #5
 800363c:	4619      	mov	r1, r3
 800363e:	4622      	mov	r2, r4
 8003640:	1b49      	subs	r1, r1, r5
 8003642:	eb62 0206 	sbc.w	r2, r2, r6
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	f04f 0400 	mov.w	r4, #0
 800364e:	0194      	lsls	r4, r2, #6
 8003650:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003654:	018b      	lsls	r3, r1, #6
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	eb64 0402 	sbc.w	r4, r4, r2
 800365c:	f04f 0100 	mov.w	r1, #0
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	00e2      	lsls	r2, r4, #3
 8003666:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800366a:	00d9      	lsls	r1, r3, #3
 800366c:	460b      	mov	r3, r1
 800366e:	4614      	mov	r4, r2
 8003670:	195b      	adds	r3, r3, r5
 8003672:	eb44 0406 	adc.w	r4, r4, r6
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	0262      	lsls	r2, r4, #9
 8003680:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003684:	0259      	lsls	r1, r3, #9
 8003686:	460b      	mov	r3, r1
 8003688:	4614      	mov	r4, r2
 800368a:	4618      	mov	r0, r3
 800368c:	4621      	mov	r1, r4
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f04f 0400 	mov.w	r4, #0
 8003694:	461a      	mov	r2, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f7fd fa84 	bl	8000ba4 <__aeabi_uldivmod>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e049      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a4:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	ea03 0501 	and.w	r5, r3, r1
 80036ba:	ea04 0602 	and.w	r6, r4, r2
 80036be:	4629      	mov	r1, r5
 80036c0:	4632      	mov	r2, r6
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	0154      	lsls	r4, r2, #5
 80036cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036d0:	014b      	lsls	r3, r1, #5
 80036d2:	4619      	mov	r1, r3
 80036d4:	4622      	mov	r2, r4
 80036d6:	1b49      	subs	r1, r1, r5
 80036d8:	eb62 0206 	sbc.w	r2, r2, r6
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0194      	lsls	r4, r2, #6
 80036e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ea:	018b      	lsls	r3, r1, #6
 80036ec:	1a5b      	subs	r3, r3, r1
 80036ee:	eb64 0402 	sbc.w	r4, r4, r2
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003700:	00d9      	lsls	r1, r3, #3
 8003702:	460b      	mov	r3, r1
 8003704:	4614      	mov	r4, r2
 8003706:	195b      	adds	r3, r3, r5
 8003708:	eb44 0406 	adc.w	r4, r4, r6
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	02a2      	lsls	r2, r4, #10
 8003716:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800371a:	0299      	lsls	r1, r3, #10
 800371c:	460b      	mov	r3, r1
 800371e:	4614      	mov	r4, r2
 8003720:	4618      	mov	r0, r3
 8003722:	4621      	mov	r1, r4
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f04f 0400 	mov.w	r4, #0
 800372a:	461a      	mov	r2, r3
 800372c:	4623      	mov	r3, r4
 800372e:	f7fd fa39 	bl	8000ba4 <__aeabi_uldivmod>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_GetSysClockFreq+0x334>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0f1b      	lsrs	r3, r3, #28
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	613b      	str	r3, [r7, #16]
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCC_GetSysClockFreq+0x338>)
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	693b      	ldr	r3, [r7, #16]
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200

0800376c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8083 	beq.w	800388c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003786:	4b95      	ldr	r3, [pc, #596]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d019      	beq.n	80037c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003792:	4b92      	ldr	r3, [pc, #584]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800379e:	4b8f      	ldr	r3, [pc, #572]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037aa:	d00c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ac:	4b8b      	ldr	r3, [pc, #556]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d112      	bne.n	80037de <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b8:	4b88      	ldr	r3, [pc, #544]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d05b      	beq.n	800388a <HAL_RCC_OscConfig+0x11e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d157      	bne.n	800388a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e216      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x8a>
 80037e8:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e01d      	b.n	8003832 <HAL_RCC_OscConfig+0xc6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0xae>
 8003800:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a75      	ldr	r2, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a72      	ldr	r2, [pc, #456]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0xc6>
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6f      	ldr	r2, [pc, #444]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6c      	ldr	r2, [pc, #432]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fc7d 	bl	8002138 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003842:	f7fe fc79 	bl	8002138 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b64      	cmp	r3, #100	; 0x64
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1db      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003854:	4b61      	ldr	r3, [pc, #388]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0xd6>
 8003860:	e014      	b.n	800388c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fe fc69 	bl	8002138 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386a:	f7fe fc65 	bl	8002138 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b64      	cmp	r3, #100	; 0x64
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1c7      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387c:	4b57      	ldr	r3, [pc, #348]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0xfe>
 8003888:	e000      	b.n	800388c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d06f      	beq.n	8003978 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038a4:	4b4d      	ldr	r3, [pc, #308]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d105      	bne.n	80038bc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038b0:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038bc:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d11c      	bne.n	8003902 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c8:	4b44      	ldr	r3, [pc, #272]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x180>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e18f      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ec:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4938      	ldr	r1, [pc, #224]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003900:	e03a      	b.n	8003978 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390a:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <HAL_RCC_OscConfig+0x274>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fc12 	bl	8002138 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe fc0e 	bl	8002138 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e170      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4925      	ldr	r1, [pc, #148]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x274>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe fbf1 	bl	8002138 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe fbed 	bl	8002138 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e14f      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d037      	beq.n	80039f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HAL_RCC_OscConfig+0x278>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fe fbd1 	bl	8002138 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fbcd 	bl	8002138 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e12f      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x22e>
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_OscConfig+0x278>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fbba 	bl	8002138 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c6:	e00f      	b.n	80039e8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fbb6 	bl	8002138 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e118      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	42470000 	.word	0x42470000
 80039e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b8a      	ldr	r3, [pc, #552]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e9      	bne.n	80039c8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8097 	beq.w	8003b30 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b79      	ldr	r3, [pc, #484]	; (8003c18 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fb75 	bl	8002138 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fe fb71 	bl	8002138 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0d3      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	4b6c      	ldr	r3, [pc, #432]	; (8003c18 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x31a>
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x354>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x33c>
 8003a8e:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a60      	ldr	r2, [pc, #384]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x354>
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003aba:	f023 0304 	bic.w	r3, r3, #4
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe fb36 	bl	8002138 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fb32 	bl	8002138 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e092      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ee      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x364>
 8003af2:	e014      	b.n	8003b1e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fb20 	bl	8002138 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fe fb1c 	bl	8002138 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e07c      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b12:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ee      	bne.n	8003afc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b24:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	4a3a      	ldr	r2, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b38:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d060      	beq.n	8003c06 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d145      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <HAL_RCC_OscConfig+0x4b0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fe faf1 	bl	8002138 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fe faed 	bl	8002138 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e04f      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	3b01      	subs	r3, #1
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	071b      	lsls	r3, r3, #28
 8003ba4:	491b      	ldr	r1, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_RCC_OscConfig+0x4b0>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fac2 	bl	8002138 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fabe 	bl	8002138 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e020      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44c>
 8003bd6:	e018      	b.n	8003c0a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <HAL_RCC_OscConfig+0x4b0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe faab 	bl	8002138 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe faa7 	bl	8002138 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e009      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x4a8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x47a>
 8003c04:	e001      	b.n	8003c0a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42470060 	.word	0x42470060

08003c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e03f      	b.n	8003cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe f95a 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f829 	bl	8003cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cfe:	f023 030c 	bic.w	r3, r3, #12
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2a:	f040 818b 	bne.w	8004044 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4ac1      	ldr	r2, [pc, #772]	; (8004038 <UART_SetConfig+0x37c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0x88>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4abf      	ldr	r2, [pc, #764]	; (800403c <UART_SetConfig+0x380>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f040 80bd 	bne.w	8003ebe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff fb5e 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8003d48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	f04f 0600 	mov.w	r6, #0
 8003d52:	46a8      	mov	r8, r5
 8003d54:	46b1      	mov	r9, r6
 8003d56:	eb18 0308 	adds.w	r3, r8, r8
 8003d5a:	eb49 0409 	adc.w	r4, r9, r9
 8003d5e:	4698      	mov	r8, r3
 8003d60:	46a1      	mov	r9, r4
 8003d62:	eb18 0805 	adds.w	r8, r8, r5
 8003d66:	eb49 0906 	adc.w	r9, r9, r6
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d7e:	4688      	mov	r8, r1
 8003d80:	4691      	mov	r9, r2
 8003d82:	eb18 0005 	adds.w	r0, r8, r5
 8003d86:	eb49 0106 	adc.w	r1, r9, r6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	461d      	mov	r5, r3
 8003d90:	f04f 0600 	mov.w	r6, #0
 8003d94:	196b      	adds	r3, r5, r5
 8003d96:	eb46 0406 	adc.w	r4, r6, r6
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	f7fc ff01 	bl	8000ba4 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4ba5      	ldr	r3, [pc, #660]	; (8004040 <UART_SetConfig+0x384>)
 8003daa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	461d      	mov	r5, r3
 8003db8:	f04f 0600 	mov.w	r6, #0
 8003dbc:	46a9      	mov	r9, r5
 8003dbe:	46b2      	mov	sl, r6
 8003dc0:	eb19 0309 	adds.w	r3, r9, r9
 8003dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	eb19 0905 	adds.w	r9, r9, r5
 8003dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de8:	4689      	mov	r9, r1
 8003dea:	4692      	mov	sl, r2
 8003dec:	eb19 0005 	adds.w	r0, r9, r5
 8003df0:	eb4a 0106 	adc.w	r1, sl, r6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	461d      	mov	r5, r3
 8003dfa:	f04f 0600 	mov.w	r6, #0
 8003dfe:	196b      	adds	r3, r5, r5
 8003e00:	eb46 0406 	adc.w	r4, r6, r6
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	f7fc fecc 	bl	8000ba4 <__aeabi_uldivmod>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <UART_SetConfig+0x384>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a86      	ldr	r2, [pc, #536]	; (8004040 <UART_SetConfig+0x384>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e34:	4498      	add	r8, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	461d      	mov	r5, r3
 8003e3a:	f04f 0600 	mov.w	r6, #0
 8003e3e:	46a9      	mov	r9, r5
 8003e40:	46b2      	mov	sl, r6
 8003e42:	eb19 0309 	adds.w	r3, r9, r9
 8003e46:	eb4a 040a 	adc.w	r4, sl, sl
 8003e4a:	4699      	mov	r9, r3
 8003e4c:	46a2      	mov	sl, r4
 8003e4e:	eb19 0905 	adds.w	r9, r9, r5
 8003e52:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e6a:	4689      	mov	r9, r1
 8003e6c:	4692      	mov	sl, r2
 8003e6e:	eb19 0005 	adds.w	r0, r9, r5
 8003e72:	eb4a 0106 	adc.w	r1, sl, r6
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	f04f 0600 	mov.w	r6, #0
 8003e80:	196b      	adds	r3, r5, r5
 8003e82:	eb46 0406 	adc.w	r4, r6, r6
 8003e86:	461a      	mov	r2, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	f7fc fe8b 	bl	8000ba4 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <UART_SetConfig+0x384>)
 8003e96:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2164      	movs	r1, #100	; 0x64
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	3332      	adds	r3, #50	; 0x32
 8003ea8:	4a65      	ldr	r2, [pc, #404]	; (8004040 <UART_SetConfig+0x384>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 0207 	and.w	r2, r3, #7
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4442      	add	r2, r8
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	e26f      	b.n	800439e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7ff fa8d 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8003ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	f04f 0600 	mov.w	r6, #0
 8003ecc:	46a8      	mov	r8, r5
 8003ece:	46b1      	mov	r9, r6
 8003ed0:	eb18 0308 	adds.w	r3, r8, r8
 8003ed4:	eb49 0409 	adc.w	r4, r9, r9
 8003ed8:	4698      	mov	r8, r3
 8003eda:	46a1      	mov	r9, r4
 8003edc:	eb18 0805 	adds.w	r8, r8, r5
 8003ee0:	eb49 0906 	adc.w	r9, r9, r6
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef8:	4688      	mov	r8, r1
 8003efa:	4691      	mov	r9, r2
 8003efc:	eb18 0005 	adds.w	r0, r8, r5
 8003f00:	eb49 0106 	adc.w	r1, r9, r6
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	461d      	mov	r5, r3
 8003f0a:	f04f 0600 	mov.w	r6, #0
 8003f0e:	196b      	adds	r3, r5, r5
 8003f10:	eb46 0406 	adc.w	r4, r6, r6
 8003f14:	461a      	mov	r2, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7fc fe44 	bl	8000ba4 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <UART_SetConfig+0x384>)
 8003f24:	fba3 2302 	umull	r2, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	461d      	mov	r5, r3
 8003f32:	f04f 0600 	mov.w	r6, #0
 8003f36:	46a9      	mov	r9, r5
 8003f38:	46b2      	mov	sl, r6
 8003f3a:	eb19 0309 	adds.w	r3, r9, r9
 8003f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f42:	4699      	mov	r9, r3
 8003f44:	46a2      	mov	sl, r4
 8003f46:	eb19 0905 	adds.w	r9, r9, r5
 8003f4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f62:	4689      	mov	r9, r1
 8003f64:	4692      	mov	sl, r2
 8003f66:	eb19 0005 	adds.w	r0, r9, r5
 8003f6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	461d      	mov	r5, r3
 8003f74:	f04f 0600 	mov.w	r6, #0
 8003f78:	196b      	adds	r3, r5, r5
 8003f7a:	eb46 0406 	adc.w	r4, r6, r6
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	f7fc fe0f 	bl	8000ba4 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <UART_SetConfig+0x384>)
 8003f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	3332      	adds	r3, #50	; 0x32
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <UART_SetConfig+0x384>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fae:	4498      	add	r8, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	f04f 0600 	mov.w	r6, #0
 8003fb8:	46a9      	mov	r9, r5
 8003fba:	46b2      	mov	sl, r6
 8003fbc:	eb19 0309 	adds.w	r3, r9, r9
 8003fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	eb19 0905 	adds.w	r9, r9, r5
 8003fcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	4692      	mov	sl, r2
 8003fe8:	eb19 0005 	adds.w	r0, r9, r5
 8003fec:	eb4a 0106 	adc.w	r1, sl, r6
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	f04f 0600 	mov.w	r6, #0
 8003ffa:	196b      	adds	r3, r5, r5
 8003ffc:	eb46 0406 	adc.w	r4, r6, r6
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	f7fc fdce 	bl	8000ba4 <__aeabi_uldivmod>
 8004008:	4603      	mov	r3, r0
 800400a:	460c      	mov	r4, r1
 800400c:	461a      	mov	r2, r3
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <UART_SetConfig+0x384>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <UART_SetConfig+0x384>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4442      	add	r2, r8
 8004034:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004036:	e1b2      	b.n	800439e <UART_SetConfig+0x6e2>
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4ad7      	ldr	r2, [pc, #860]	; (80043a8 <UART_SetConfig+0x6ec>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d005      	beq.n	800405a <UART_SetConfig+0x39e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4ad6      	ldr	r2, [pc, #856]	; (80043ac <UART_SetConfig+0x6f0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f040 80d1 	bne.w	80041fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800405a:	f7ff f9d3 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 800405e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	469a      	mov	sl, r3
 8004064:	f04f 0b00 	mov.w	fp, #0
 8004068:	46d0      	mov	r8, sl
 800406a:	46d9      	mov	r9, fp
 800406c:	eb18 0308 	adds.w	r3, r8, r8
 8004070:	eb49 0409 	adc.w	r4, r9, r9
 8004074:	4698      	mov	r8, r3
 8004076:	46a1      	mov	r9, r4
 8004078:	eb18 080a 	adds.w	r8, r8, sl
 800407c:	eb49 090b 	adc.w	r9, r9, fp
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800408c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004094:	4688      	mov	r8, r1
 8004096:	4691      	mov	r9, r2
 8004098:	eb1a 0508 	adds.w	r5, sl, r8
 800409c:	eb4b 0609 	adc.w	r6, fp, r9
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	0094      	lsls	r4, r2, #2
 80040b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b8:	008b      	lsls	r3, r1, #2
 80040ba:	461a      	mov	r2, r3
 80040bc:	4623      	mov	r3, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	4631      	mov	r1, r6
 80040c2:	f7fc fd6f 	bl	8000ba4 <__aeabi_uldivmod>
 80040c6:	4603      	mov	r3, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	461a      	mov	r2, r3
 80040cc:	4bb8      	ldr	r3, [pc, #736]	; (80043b0 <UART_SetConfig+0x6f4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	469b      	mov	fp, r3
 80040dc:	f04f 0c00 	mov.w	ip, #0
 80040e0:	46d9      	mov	r9, fp
 80040e2:	46e2      	mov	sl, ip
 80040e4:	eb19 0309 	adds.w	r3, r9, r9
 80040e8:	eb4a 040a 	adc.w	r4, sl, sl
 80040ec:	4699      	mov	r9, r3
 80040ee:	46a2      	mov	sl, r4
 80040f0:	eb19 090b 	adds.w	r9, r9, fp
 80040f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410c:	4689      	mov	r9, r1
 800410e:	4692      	mov	sl, r2
 8004110:	eb1b 0509 	adds.w	r5, fp, r9
 8004114:	eb4c 060a 	adc.w	r6, ip, sl
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f04f 0400 	mov.w	r4, #0
 800412a:	0094      	lsls	r4, r2, #2
 800412c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004130:	008b      	lsls	r3, r1, #2
 8004132:	461a      	mov	r2, r3
 8004134:	4623      	mov	r3, r4
 8004136:	4628      	mov	r0, r5
 8004138:	4631      	mov	r1, r6
 800413a:	f7fc fd33 	bl	8000ba4 <__aeabi_uldivmod>
 800413e:	4603      	mov	r3, r0
 8004140:	460c      	mov	r4, r1
 8004142:	461a      	mov	r2, r3
 8004144:	4b9a      	ldr	r3, [pc, #616]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004146:	fba3 1302 	umull	r1, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2164      	movs	r1, #100	; 0x64
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	; 0x32
 8004158:	4a95      	ldr	r2, [pc, #596]	; (80043b0 <UART_SetConfig+0x6f4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	4498      	add	r8, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	469b      	mov	fp, r3
 800416a:	f04f 0c00 	mov.w	ip, #0
 800416e:	46d9      	mov	r9, fp
 8004170:	46e2      	mov	sl, ip
 8004172:	eb19 0309 	adds.w	r3, r9, r9
 8004176:	eb4a 040a 	adc.w	r4, sl, sl
 800417a:	4699      	mov	r9, r3
 800417c:	46a2      	mov	sl, r4
 800417e:	eb19 090b 	adds.w	r9, r9, fp
 8004182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800419a:	4689      	mov	r9, r1
 800419c:	4692      	mov	sl, r2
 800419e:	eb1b 0509 	adds.w	r5, fp, r9
 80041a2:	eb4c 060a 	adc.w	r6, ip, sl
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	0094      	lsls	r4, r2, #2
 80041ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	4631      	mov	r1, r6
 80041c8:	f7fc fcec 	bl	8000ba4 <__aeabi_uldivmod>
 80041cc:	4603      	mov	r3, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b77      	ldr	r3, [pc, #476]	; (80043b0 <UART_SetConfig+0x6f4>)
 80041d4:	fba3 1302 	umull	r1, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	2164      	movs	r1, #100	; 0x64
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	3332      	adds	r3, #50	; 0x32
 80041e6:	4a72      	ldr	r2, [pc, #456]	; (80043b0 <UART_SetConfig+0x6f4>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4442      	add	r2, r8
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	e0d0      	b.n	800439e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7ff f8ee 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004200:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	469a      	mov	sl, r3
 8004206:	f04f 0b00 	mov.w	fp, #0
 800420a:	46d0      	mov	r8, sl
 800420c:	46d9      	mov	r9, fp
 800420e:	eb18 0308 	adds.w	r3, r8, r8
 8004212:	eb49 0409 	adc.w	r4, r9, r9
 8004216:	4698      	mov	r8, r3
 8004218:	46a1      	mov	r9, r4
 800421a:	eb18 080a 	adds.w	r8, r8, sl
 800421e:	eb49 090b 	adc.w	r9, r9, fp
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800422e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004232:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004236:	4688      	mov	r8, r1
 8004238:	4691      	mov	r9, r2
 800423a:	eb1a 0508 	adds.w	r5, sl, r8
 800423e:	eb4b 0609 	adc.w	r6, fp, r9
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4619      	mov	r1, r3
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	0094      	lsls	r4, r2, #2
 8004256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	461a      	mov	r2, r3
 800425e:	4623      	mov	r3, r4
 8004260:	4628      	mov	r0, r5
 8004262:	4631      	mov	r1, r6
 8004264:	f7fc fc9e 	bl	8000ba4 <__aeabi_uldivmod>
 8004268:	4603      	mov	r3, r0
 800426a:	460c      	mov	r4, r1
 800426c:	461a      	mov	r2, r3
 800426e:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	469b      	mov	fp, r3
 800427e:	f04f 0c00 	mov.w	ip, #0
 8004282:	46d9      	mov	r9, fp
 8004284:	46e2      	mov	sl, ip
 8004286:	eb19 0309 	adds.w	r3, r9, r9
 800428a:	eb4a 040a 	adc.w	r4, sl, sl
 800428e:	4699      	mov	r9, r3
 8004290:	46a2      	mov	sl, r4
 8004292:	eb19 090b 	adds.w	r9, r9, fp
 8004296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ae:	4689      	mov	r9, r1
 80042b0:	4692      	mov	sl, r2
 80042b2:	eb1b 0509 	adds.w	r5, fp, r9
 80042b6:	eb4c 060a 	adc.w	r6, ip, sl
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0094      	lsls	r4, r2, #2
 80042ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	4631      	mov	r1, r6
 80042dc:	f7fc fc62 	bl	8000ba4 <__aeabi_uldivmod>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <UART_SetConfig+0x6f4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a2d      	ldr	r2, [pc, #180]	; (80043b0 <UART_SetConfig+0x6f4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004306:	4498      	add	r8, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	469b      	mov	fp, r3
 800430c:	f04f 0c00 	mov.w	ip, #0
 8004310:	46d9      	mov	r9, fp
 8004312:	46e2      	mov	sl, ip
 8004314:	eb19 0309 	adds.w	r3, r9, r9
 8004318:	eb4a 040a 	adc.w	r4, sl, sl
 800431c:	4699      	mov	r9, r3
 800431e:	46a2      	mov	sl, r4
 8004320:	eb19 090b 	adds.w	r9, r9, fp
 8004324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433c:	4689      	mov	r9, r1
 800433e:	4692      	mov	sl, r2
 8004340:	eb1b 0509 	adds.w	r5, fp, r9
 8004344:	eb4c 060a 	adc.w	r6, ip, sl
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	0094      	lsls	r4, r2, #2
 800435c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	4628      	mov	r0, r5
 8004368:	4631      	mov	r1, r6
 800436a:	f7fc fc1b 	bl	8000ba4 <__aeabi_uldivmod>
 800436e:	4603      	mov	r3, r0
 8004370:	460c      	mov	r4, r1
 8004372:	461a      	mov	r2, r3
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <UART_SetConfig+0x6f4>)
 8004376:	fba3 1302 	umull	r1, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2164      	movs	r1, #100	; 0x64
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <UART_SetConfig+0x6f4>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4442      	add	r2, r8
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	e7ff      	b.n	800439e <UART_SetConfig+0x6e2>
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f
 80043b4:	00000000 	.word	0x00000000

080043b8 <cos>:
 80043b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043ba:	ec51 0b10 	vmov	r0, r1, d0
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <cos+0x80>)
 80043c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043c4:	4293      	cmp	r3, r2
 80043c6:	dc06      	bgt.n	80043d6 <cos+0x1e>
 80043c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004430 <cos+0x78>
 80043cc:	f000 fa74 	bl	80048b8 <__kernel_cos>
 80043d0:	ec51 0b10 	vmov	r0, r1, d0
 80043d4:	e007      	b.n	80043e6 <cos+0x2e>
 80043d6:	4a19      	ldr	r2, [pc, #100]	; (800443c <cos+0x84>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	dd09      	ble.n	80043f0 <cos+0x38>
 80043dc:	ee10 2a10 	vmov	r2, s0
 80043e0:	460b      	mov	r3, r1
 80043e2:	f7fb ff15 	bl	8000210 <__aeabi_dsub>
 80043e6:	ec41 0b10 	vmov	d0, r0, r1
 80043ea:	b005      	add	sp, #20
 80043ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80043f0:	4668      	mov	r0, sp
 80043f2:	f000 f86d 	bl	80044d0 <__ieee754_rem_pio2>
 80043f6:	f000 0003 	and.w	r0, r0, #3
 80043fa:	2801      	cmp	r0, #1
 80043fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004400:	ed9d 0b00 	vldr	d0, [sp]
 8004404:	d007      	beq.n	8004416 <cos+0x5e>
 8004406:	2802      	cmp	r0, #2
 8004408:	d00e      	beq.n	8004428 <cos+0x70>
 800440a:	2800      	cmp	r0, #0
 800440c:	d0de      	beq.n	80043cc <cos+0x14>
 800440e:	2001      	movs	r0, #1
 8004410:	f000 fe5a 	bl	80050c8 <__kernel_sin>
 8004414:	e7dc      	b.n	80043d0 <cos+0x18>
 8004416:	f000 fe57 	bl	80050c8 <__kernel_sin>
 800441a:	ec53 2b10 	vmov	r2, r3, d0
 800441e:	ee10 0a10 	vmov	r0, s0
 8004422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004426:	e7de      	b.n	80043e6 <cos+0x2e>
 8004428:	f000 fa46 	bl	80048b8 <__kernel_cos>
 800442c:	e7f5      	b.n	800441a <cos+0x62>
 800442e:	bf00      	nop
	...
 8004438:	3fe921fb 	.word	0x3fe921fb
 800443c:	7fefffff 	.word	0x7fefffff

08004440 <sin>:
 8004440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004442:	ec51 0b10 	vmov	r0, r1, d0
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <sin+0x88>)
 8004448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800444c:	4293      	cmp	r3, r2
 800444e:	dc07      	bgt.n	8004460 <sin+0x20>
 8004450:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80044c0 <sin+0x80>
 8004454:	2000      	movs	r0, #0
 8004456:	f000 fe37 	bl	80050c8 <__kernel_sin>
 800445a:	ec51 0b10 	vmov	r0, r1, d0
 800445e:	e007      	b.n	8004470 <sin+0x30>
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <sin+0x8c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	dd09      	ble.n	800447a <sin+0x3a>
 8004466:	ee10 2a10 	vmov	r2, s0
 800446a:	460b      	mov	r3, r1
 800446c:	f7fb fed0 	bl	8000210 <__aeabi_dsub>
 8004470:	ec41 0b10 	vmov	d0, r0, r1
 8004474:	b005      	add	sp, #20
 8004476:	f85d fb04 	ldr.w	pc, [sp], #4
 800447a:	4668      	mov	r0, sp
 800447c:	f000 f828 	bl	80044d0 <__ieee754_rem_pio2>
 8004480:	f000 0003 	and.w	r0, r0, #3
 8004484:	2801      	cmp	r0, #1
 8004486:	ed9d 1b02 	vldr	d1, [sp, #8]
 800448a:	ed9d 0b00 	vldr	d0, [sp]
 800448e:	d004      	beq.n	800449a <sin+0x5a>
 8004490:	2802      	cmp	r0, #2
 8004492:	d005      	beq.n	80044a0 <sin+0x60>
 8004494:	b970      	cbnz	r0, 80044b4 <sin+0x74>
 8004496:	2001      	movs	r0, #1
 8004498:	e7dd      	b.n	8004456 <sin+0x16>
 800449a:	f000 fa0d 	bl	80048b8 <__kernel_cos>
 800449e:	e7dc      	b.n	800445a <sin+0x1a>
 80044a0:	2001      	movs	r0, #1
 80044a2:	f000 fe11 	bl	80050c8 <__kernel_sin>
 80044a6:	ec53 2b10 	vmov	r2, r3, d0
 80044aa:	ee10 0a10 	vmov	r0, s0
 80044ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80044b2:	e7dd      	b.n	8004470 <sin+0x30>
 80044b4:	f000 fa00 	bl	80048b8 <__kernel_cos>
 80044b8:	e7f5      	b.n	80044a6 <sin+0x66>
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
	...
 80044c8:	3fe921fb 	.word	0x3fe921fb
 80044cc:	7fefffff 	.word	0x7fefffff

080044d0 <__ieee754_rem_pio2>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	ec57 6b10 	vmov	r6, r7, d0
 80044d8:	4bc3      	ldr	r3, [pc, #780]	; (80047e8 <__ieee754_rem_pio2+0x318>)
 80044da:	b08d      	sub	sp, #52	; 0x34
 80044dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80044e0:	4598      	cmp	r8, r3
 80044e2:	4604      	mov	r4, r0
 80044e4:	9704      	str	r7, [sp, #16]
 80044e6:	dc07      	bgt.n	80044f8 <__ieee754_rem_pio2+0x28>
 80044e8:	2200      	movs	r2, #0
 80044ea:	2300      	movs	r3, #0
 80044ec:	ed84 0b00 	vstr	d0, [r4]
 80044f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80044f4:	2500      	movs	r5, #0
 80044f6:	e027      	b.n	8004548 <__ieee754_rem_pio2+0x78>
 80044f8:	4bbc      	ldr	r3, [pc, #752]	; (80047ec <__ieee754_rem_pio2+0x31c>)
 80044fa:	4598      	cmp	r8, r3
 80044fc:	dc75      	bgt.n	80045ea <__ieee754_rem_pio2+0x11a>
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	4dbb      	ldr	r5, [pc, #748]	; (80047f0 <__ieee754_rem_pio2+0x320>)
 8004502:	2b00      	cmp	r3, #0
 8004504:	ee10 0a10 	vmov	r0, s0
 8004508:	a3a9      	add	r3, pc, #676	; (adr r3, 80047b0 <__ieee754_rem_pio2+0x2e0>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	4639      	mov	r1, r7
 8004510:	dd36      	ble.n	8004580 <__ieee754_rem_pio2+0xb0>
 8004512:	f7fb fe7d 	bl	8000210 <__aeabi_dsub>
 8004516:	45a8      	cmp	r8, r5
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	d018      	beq.n	8004550 <__ieee754_rem_pio2+0x80>
 800451e:	a3a6      	add	r3, pc, #664	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x2e8>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f7fb fe74 	bl	8000210 <__aeabi_dsub>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	e9c4 2300 	strd	r2, r3, [r4]
 8004530:	4630      	mov	r0, r6
 8004532:	4639      	mov	r1, r7
 8004534:	f7fb fe6c 	bl	8000210 <__aeabi_dsub>
 8004538:	a39f      	add	r3, pc, #636	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x2e8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fb fe67 	bl	8000210 <__aeabi_dsub>
 8004542:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004546:	2501      	movs	r5, #1
 8004548:	4628      	mov	r0, r5
 800454a:	b00d      	add	sp, #52	; 0x34
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004550:	a39b      	add	r3, pc, #620	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x2f0>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f7fb fe5b 	bl	8000210 <__aeabi_dsub>
 800455a:	a39b      	add	r3, pc, #620	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x2f8>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	f7fb fe54 	bl	8000210 <__aeabi_dsub>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	e9c4 2300 	strd	r2, r3, [r4]
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fb fe4c 	bl	8000210 <__aeabi_dsub>
 8004578:	a393      	add	r3, pc, #588	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x2f8>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	e7de      	b.n	800453e <__ieee754_rem_pio2+0x6e>
 8004580:	f7fb fe48 	bl	8000214 <__adddf3>
 8004584:	45a8      	cmp	r8, r5
 8004586:	4606      	mov	r6, r0
 8004588:	460f      	mov	r7, r1
 800458a:	d016      	beq.n	80045ba <__ieee754_rem_pio2+0xea>
 800458c:	a38a      	add	r3, pc, #552	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x2e8>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f7fb fe3f 	bl	8000214 <__adddf3>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	e9c4 2300 	strd	r2, r3, [r4]
 800459e:	4630      	mov	r0, r6
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fb fe35 	bl	8000210 <__aeabi_dsub>
 80045a6:	a384      	add	r3, pc, #528	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x2e8>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fb fe32 	bl	8000214 <__adddf3>
 80045b0:	f04f 35ff 	mov.w	r5, #4294967295
 80045b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045b8:	e7c6      	b.n	8004548 <__ieee754_rem_pio2+0x78>
 80045ba:	a381      	add	r3, pc, #516	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x2f0>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fb fe28 	bl	8000214 <__adddf3>
 80045c4:	a380      	add	r3, pc, #512	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x2f8>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	f7fb fe21 	bl	8000214 <__adddf3>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	e9c4 2300 	strd	r2, r3, [r4]
 80045da:	4630      	mov	r0, r6
 80045dc:	4639      	mov	r1, r7
 80045de:	f7fb fe17 	bl	8000210 <__aeabi_dsub>
 80045e2:	a379      	add	r3, pc, #484	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x2f8>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	e7e0      	b.n	80045ac <__ieee754_rem_pio2+0xdc>
 80045ea:	4b82      	ldr	r3, [pc, #520]	; (80047f4 <__ieee754_rem_pio2+0x324>)
 80045ec:	4598      	cmp	r8, r3
 80045ee:	f300 80d0 	bgt.w	8004792 <__ieee754_rem_pio2+0x2c2>
 80045f2:	f000 fe23 	bl	800523c <fabs>
 80045f6:	ec57 6b10 	vmov	r6, r7, d0
 80045fa:	ee10 0a10 	vmov	r0, s0
 80045fe:	a374      	add	r3, pc, #464	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x300>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	4639      	mov	r1, r7
 8004606:	f7fb ffbb 	bl	8000580 <__aeabi_dmul>
 800460a:	2200      	movs	r2, #0
 800460c:	4b7a      	ldr	r3, [pc, #488]	; (80047f8 <__ieee754_rem_pio2+0x328>)
 800460e:	f7fb fe01 	bl	8000214 <__adddf3>
 8004612:	f7fc fa4f 	bl	8000ab4 <__aeabi_d2iz>
 8004616:	4605      	mov	r5, r0
 8004618:	f7fb ff48 	bl	80004ac <__aeabi_i2d>
 800461c:	a364      	add	r3, pc, #400	; (adr r3, 80047b0 <__ieee754_rem_pio2+0x2e0>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004626:	f7fb ffab 	bl	8000580 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fb fded 	bl	8000210 <__aeabi_dsub>
 8004636:	a360      	add	r3, pc, #384	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x2e8>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	4682      	mov	sl, r0
 800463e:	468b      	mov	fp, r1
 8004640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004644:	f7fb ff9c 	bl	8000580 <__aeabi_dmul>
 8004648:	2d1f      	cmp	r5, #31
 800464a:	4606      	mov	r6, r0
 800464c:	460f      	mov	r7, r1
 800464e:	dc0c      	bgt.n	800466a <__ieee754_rem_pio2+0x19a>
 8004650:	1e6a      	subs	r2, r5, #1
 8004652:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <__ieee754_rem_pio2+0x32c>)
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	4543      	cmp	r3, r8
 800465a:	d006      	beq.n	800466a <__ieee754_rem_pio2+0x19a>
 800465c:	4632      	mov	r2, r6
 800465e:	463b      	mov	r3, r7
 8004660:	4650      	mov	r0, sl
 8004662:	4659      	mov	r1, fp
 8004664:	f7fb fdd4 	bl	8000210 <__aeabi_dsub>
 8004668:	e00e      	b.n	8004688 <__ieee754_rem_pio2+0x1b8>
 800466a:	4632      	mov	r2, r6
 800466c:	463b      	mov	r3, r7
 800466e:	4650      	mov	r0, sl
 8004670:	4659      	mov	r1, fp
 8004672:	f7fb fdcd 	bl	8000210 <__aeabi_dsub>
 8004676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	9a05      	ldr	r2, [sp, #20]
 800467e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b10      	cmp	r3, #16
 8004686:	dc02      	bgt.n	800468e <__ieee754_rem_pio2+0x1be>
 8004688:	e9c4 0100 	strd	r0, r1, [r4]
 800468c:	e039      	b.n	8004702 <__ieee754_rem_pio2+0x232>
 800468e:	a34c      	add	r3, pc, #304	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x2f0>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004698:	f7fb ff72 	bl	8000580 <__aeabi_dmul>
 800469c:	4606      	mov	r6, r0
 800469e:	460f      	mov	r7, r1
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4650      	mov	r0, sl
 80046a6:	4659      	mov	r1, fp
 80046a8:	f7fb fdb2 	bl	8000210 <__aeabi_dsub>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4680      	mov	r8, r0
 80046b2:	4689      	mov	r9, r1
 80046b4:	4650      	mov	r0, sl
 80046b6:	4659      	mov	r1, fp
 80046b8:	f7fb fdaa 	bl	8000210 <__aeabi_dsub>
 80046bc:	4632      	mov	r2, r6
 80046be:	463b      	mov	r3, r7
 80046c0:	f7fb fda6 	bl	8000210 <__aeabi_dsub>
 80046c4:	a340      	add	r3, pc, #256	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x2f8>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	4606      	mov	r6, r0
 80046cc:	460f      	mov	r7, r1
 80046ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d2:	f7fb ff55 	bl	8000580 <__aeabi_dmul>
 80046d6:	4632      	mov	r2, r6
 80046d8:	463b      	mov	r3, r7
 80046da:	f7fb fd99 	bl	8000210 <__aeabi_dsub>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4606      	mov	r6, r0
 80046e4:	460f      	mov	r7, r1
 80046e6:	4640      	mov	r0, r8
 80046e8:	4649      	mov	r1, r9
 80046ea:	f7fb fd91 	bl	8000210 <__aeabi_dsub>
 80046ee:	9a05      	ldr	r2, [sp, #20]
 80046f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b31      	cmp	r3, #49	; 0x31
 80046f8:	dc20      	bgt.n	800473c <__ieee754_rem_pio2+0x26c>
 80046fa:	e9c4 0100 	strd	r0, r1, [r4]
 80046fe:	46c2      	mov	sl, r8
 8004700:	46cb      	mov	fp, r9
 8004702:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004706:	4650      	mov	r0, sl
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	4659      	mov	r1, fp
 800470e:	f7fb fd7f 	bl	8000210 <__aeabi_dsub>
 8004712:	463b      	mov	r3, r7
 8004714:	4632      	mov	r2, r6
 8004716:	f7fb fd7b 	bl	8000210 <__aeabi_dsub>
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004722:	f6bf af11 	bge.w	8004548 <__ieee754_rem_pio2+0x78>
 8004726:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	f8c4 8000 	str.w	r8, [r4]
 8004730:	60a0      	str	r0, [r4, #8]
 8004732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004736:	60e3      	str	r3, [r4, #12]
 8004738:	426d      	negs	r5, r5
 800473a:	e705      	b.n	8004548 <__ieee754_rem_pio2+0x78>
 800473c:	a326      	add	r3, pc, #152	; (adr r3, 80047d8 <__ieee754_rem_pio2+0x308>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004746:	f7fb ff1b 	bl	8000580 <__aeabi_dmul>
 800474a:	4606      	mov	r6, r0
 800474c:	460f      	mov	r7, r1
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4640      	mov	r0, r8
 8004754:	4649      	mov	r1, r9
 8004756:	f7fb fd5b 	bl	8000210 <__aeabi_dsub>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4682      	mov	sl, r0
 8004760:	468b      	mov	fp, r1
 8004762:	4640      	mov	r0, r8
 8004764:	4649      	mov	r1, r9
 8004766:	f7fb fd53 	bl	8000210 <__aeabi_dsub>
 800476a:	4632      	mov	r2, r6
 800476c:	463b      	mov	r3, r7
 800476e:	f7fb fd4f 	bl	8000210 <__aeabi_dsub>
 8004772:	a31b      	add	r3, pc, #108	; (adr r3, 80047e0 <__ieee754_rem_pio2+0x310>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	4606      	mov	r6, r0
 800477a:	460f      	mov	r7, r1
 800477c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004780:	f7fb fefe 	bl	8000580 <__aeabi_dmul>
 8004784:	4632      	mov	r2, r6
 8004786:	463b      	mov	r3, r7
 8004788:	f7fb fd42 	bl	8000210 <__aeabi_dsub>
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	e764      	b.n	800465c <__ieee754_rem_pio2+0x18c>
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <__ieee754_rem_pio2+0x330>)
 8004794:	4598      	cmp	r8, r3
 8004796:	dd35      	ble.n	8004804 <__ieee754_rem_pio2+0x334>
 8004798:	ee10 2a10 	vmov	r2, s0
 800479c:	463b      	mov	r3, r7
 800479e:	4630      	mov	r0, r6
 80047a0:	4639      	mov	r1, r7
 80047a2:	f7fb fd35 	bl	8000210 <__aeabi_dsub>
 80047a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047aa:	e9c4 0100 	strd	r0, r1, [r4]
 80047ae:	e6a1      	b.n	80044f4 <__ieee754_rem_pio2+0x24>
 80047b0:	54400000 	.word	0x54400000
 80047b4:	3ff921fb 	.word	0x3ff921fb
 80047b8:	1a626331 	.word	0x1a626331
 80047bc:	3dd0b461 	.word	0x3dd0b461
 80047c0:	1a600000 	.word	0x1a600000
 80047c4:	3dd0b461 	.word	0x3dd0b461
 80047c8:	2e037073 	.word	0x2e037073
 80047cc:	3ba3198a 	.word	0x3ba3198a
 80047d0:	6dc9c883 	.word	0x6dc9c883
 80047d4:	3fe45f30 	.word	0x3fe45f30
 80047d8:	2e000000 	.word	0x2e000000
 80047dc:	3ba3198a 	.word	0x3ba3198a
 80047e0:	252049c1 	.word	0x252049c1
 80047e4:	397b839a 	.word	0x397b839a
 80047e8:	3fe921fb 	.word	0x3fe921fb
 80047ec:	4002d97b 	.word	0x4002d97b
 80047f0:	3ff921fb 	.word	0x3ff921fb
 80047f4:	413921fb 	.word	0x413921fb
 80047f8:	3fe00000 	.word	0x3fe00000
 80047fc:	080054f0 	.word	0x080054f0
 8004800:	7fefffff 	.word	0x7fefffff
 8004804:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004808:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800480c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004810:	4630      	mov	r0, r6
 8004812:	460f      	mov	r7, r1
 8004814:	f7fc f94e 	bl	8000ab4 <__aeabi_d2iz>
 8004818:	f7fb fe48 	bl	80004ac <__aeabi_i2d>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004828:	f7fb fcf2 	bl	8000210 <__aeabi_dsub>
 800482c:	2200      	movs	r2, #0
 800482e:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <__ieee754_rem_pio2+0x3dc>)
 8004830:	f7fb fea6 	bl	8000580 <__aeabi_dmul>
 8004834:	460f      	mov	r7, r1
 8004836:	4606      	mov	r6, r0
 8004838:	f7fc f93c 	bl	8000ab4 <__aeabi_d2iz>
 800483c:	f7fb fe36 	bl	80004ac <__aeabi_i2d>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4630      	mov	r0, r6
 8004846:	4639      	mov	r1, r7
 8004848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800484c:	f7fb fce0 	bl	8000210 <__aeabi_dsub>
 8004850:	2200      	movs	r2, #0
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <__ieee754_rem_pio2+0x3dc>)
 8004854:	f7fb fe94 	bl	8000580 <__aeabi_dmul>
 8004858:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800485c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004860:	f04f 0803 	mov.w	r8, #3
 8004864:	2600      	movs	r6, #0
 8004866:	2700      	movs	r7, #0
 8004868:	4632      	mov	r2, r6
 800486a:	463b      	mov	r3, r7
 800486c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004870:	f108 3aff 	add.w	sl, r8, #4294967295
 8004874:	f7fc f8ec 	bl	8000a50 <__aeabi_dcmpeq>
 8004878:	b9b0      	cbnz	r0, 80048a8 <__ieee754_rem_pio2+0x3d8>
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <__ieee754_rem_pio2+0x3e0>)
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	2302      	movs	r3, #2
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	462a      	mov	r2, r5
 8004884:	4643      	mov	r3, r8
 8004886:	4621      	mov	r1, r4
 8004888:	a806      	add	r0, sp, #24
 800488a:	f000 f8dd 	bl	8004a48 <__kernel_rem_pio2>
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	4605      	mov	r5, r0
 8004894:	f6bf ae58 	bge.w	8004548 <__ieee754_rem_pio2+0x78>
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	68e3      	ldr	r3, [r4, #12]
 80048a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	e746      	b.n	8004736 <__ieee754_rem_pio2+0x266>
 80048a8:	46d0      	mov	r8, sl
 80048aa:	e7dd      	b.n	8004868 <__ieee754_rem_pio2+0x398>
 80048ac:	41700000 	.word	0x41700000
 80048b0:	08005570 	.word	0x08005570
 80048b4:	00000000 	.word	0x00000000

080048b8 <__kernel_cos>:
 80048b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	ec59 8b10 	vmov	r8, r9, d0
 80048c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80048c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80048c8:	ed2d 8b02 	vpush	{d8}
 80048cc:	eeb0 8a41 	vmov.f32	s16, s2
 80048d0:	eef0 8a61 	vmov.f32	s17, s3
 80048d4:	da07      	bge.n	80048e6 <__kernel_cos+0x2e>
 80048d6:	ee10 0a10 	vmov	r0, s0
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fc f8ea 	bl	8000ab4 <__aeabi_d2iz>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f000 8089 	beq.w	80049f8 <__kernel_cos+0x140>
 80048e6:	4642      	mov	r2, r8
 80048e8:	464b      	mov	r3, r9
 80048ea:	4640      	mov	r0, r8
 80048ec:	4649      	mov	r1, r9
 80048ee:	f7fb fe47 	bl	8000580 <__aeabi_dmul>
 80048f2:	2200      	movs	r2, #0
 80048f4:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <__kernel_cos+0x178>)
 80048f6:	4604      	mov	r4, r0
 80048f8:	460d      	mov	r5, r1
 80048fa:	f7fb fe41 	bl	8000580 <__aeabi_dmul>
 80048fe:	a340      	add	r3, pc, #256	; (adr r3, 8004a00 <__kernel_cos+0x148>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	4682      	mov	sl, r0
 8004906:	468b      	mov	fp, r1
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fb fe38 	bl	8000580 <__aeabi_dmul>
 8004910:	a33d      	add	r3, pc, #244	; (adr r3, 8004a08 <__kernel_cos+0x150>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb fc7d 	bl	8000214 <__adddf3>
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	f7fb fe2f 	bl	8000580 <__aeabi_dmul>
 8004922:	a33b      	add	r3, pc, #236	; (adr r3, 8004a10 <__kernel_cos+0x158>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fc72 	bl	8000210 <__aeabi_dsub>
 800492c:	4622      	mov	r2, r4
 800492e:	462b      	mov	r3, r5
 8004930:	f7fb fe26 	bl	8000580 <__aeabi_dmul>
 8004934:	a338      	add	r3, pc, #224	; (adr r3, 8004a18 <__kernel_cos+0x160>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fc6b 	bl	8000214 <__adddf3>
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	f7fb fe1d 	bl	8000580 <__aeabi_dmul>
 8004946:	a336      	add	r3, pc, #216	; (adr r3, 8004a20 <__kernel_cos+0x168>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fb fc60 	bl	8000210 <__aeabi_dsub>
 8004950:	4622      	mov	r2, r4
 8004952:	462b      	mov	r3, r5
 8004954:	f7fb fe14 	bl	8000580 <__aeabi_dmul>
 8004958:	a333      	add	r3, pc, #204	; (adr r3, 8004a28 <__kernel_cos+0x170>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb fc59 	bl	8000214 <__adddf3>
 8004962:	4622      	mov	r2, r4
 8004964:	462b      	mov	r3, r5
 8004966:	f7fb fe0b 	bl	8000580 <__aeabi_dmul>
 800496a:	4622      	mov	r2, r4
 800496c:	462b      	mov	r3, r5
 800496e:	f7fb fe07 	bl	8000580 <__aeabi_dmul>
 8004972:	ec53 2b18 	vmov	r2, r3, d8
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	f7fb fdff 	bl	8000580 <__aeabi_dmul>
 8004982:	460b      	mov	r3, r1
 8004984:	4602      	mov	r2, r0
 8004986:	4629      	mov	r1, r5
 8004988:	4620      	mov	r0, r4
 800498a:	f7fb fc41 	bl	8000210 <__aeabi_dsub>
 800498e:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <__kernel_cos+0x17c>)
 8004990:	429e      	cmp	r6, r3
 8004992:	4680      	mov	r8, r0
 8004994:	4689      	mov	r9, r1
 8004996:	dc11      	bgt.n	80049bc <__kernel_cos+0x104>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4650      	mov	r0, sl
 800499e:	4659      	mov	r1, fp
 80049a0:	f7fb fc36 	bl	8000210 <__aeabi_dsub>
 80049a4:	460b      	mov	r3, r1
 80049a6:	4924      	ldr	r1, [pc, #144]	; (8004a38 <__kernel_cos+0x180>)
 80049a8:	4602      	mov	r2, r0
 80049aa:	2000      	movs	r0, #0
 80049ac:	f7fb fc30 	bl	8000210 <__aeabi_dsub>
 80049b0:	ecbd 8b02 	vpop	{d8}
 80049b4:	ec41 0b10 	vmov	d0, r0, r1
 80049b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049bc:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <__kernel_cos+0x184>)
 80049be:	491e      	ldr	r1, [pc, #120]	; (8004a38 <__kernel_cos+0x180>)
 80049c0:	429e      	cmp	r6, r3
 80049c2:	bfcc      	ite	gt
 80049c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8004a40 <__kernel_cos+0x188>)
 80049c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80049ca:	2400      	movs	r4, #0
 80049cc:	4622      	mov	r2, r4
 80049ce:	462b      	mov	r3, r5
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fb fc1d 	bl	8000210 <__aeabi_dsub>
 80049d6:	4622      	mov	r2, r4
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	462b      	mov	r3, r5
 80049de:	4650      	mov	r0, sl
 80049e0:	4659      	mov	r1, fp
 80049e2:	f7fb fc15 	bl	8000210 <__aeabi_dsub>
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	f7fb fc11 	bl	8000210 <__aeabi_dsub>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4630      	mov	r0, r6
 80049f4:	4639      	mov	r1, r7
 80049f6:	e7d9      	b.n	80049ac <__kernel_cos+0xf4>
 80049f8:	2000      	movs	r0, #0
 80049fa:	490f      	ldr	r1, [pc, #60]	; (8004a38 <__kernel_cos+0x180>)
 80049fc:	e7d8      	b.n	80049b0 <__kernel_cos+0xf8>
 80049fe:	bf00      	nop
 8004a00:	be8838d4 	.word	0xbe8838d4
 8004a04:	bda8fae9 	.word	0xbda8fae9
 8004a08:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a0c:	3e21ee9e 	.word	0x3e21ee9e
 8004a10:	809c52ad 	.word	0x809c52ad
 8004a14:	3e927e4f 	.word	0x3e927e4f
 8004a18:	19cb1590 	.word	0x19cb1590
 8004a1c:	3efa01a0 	.word	0x3efa01a0
 8004a20:	16c15177 	.word	0x16c15177
 8004a24:	3f56c16c 	.word	0x3f56c16c
 8004a28:	5555554c 	.word	0x5555554c
 8004a2c:	3fa55555 	.word	0x3fa55555
 8004a30:	3fe00000 	.word	0x3fe00000
 8004a34:	3fd33332 	.word	0x3fd33332
 8004a38:	3ff00000 	.word	0x3ff00000
 8004a3c:	3fe90000 	.word	0x3fe90000
 8004a40:	3fd20000 	.word	0x3fd20000
 8004a44:	00000000 	.word	0x00000000

08004a48 <__kernel_rem_pio2>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	ed2d 8b02 	vpush	{d8}
 8004a50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004a54:	1ed4      	subs	r4, r2, #3
 8004a56:	9308      	str	r3, [sp, #32]
 8004a58:	9101      	str	r1, [sp, #4]
 8004a5a:	4bc5      	ldr	r3, [pc, #788]	; (8004d70 <__kernel_rem_pio2+0x328>)
 8004a5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004a5e:	9009      	str	r0, [sp, #36]	; 0x24
 8004a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	9b08      	ldr	r3, [sp, #32]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	2318      	movs	r3, #24
 8004a6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8004a72:	f06f 0317 	mvn.w	r3, #23
 8004a76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004a7a:	fb04 3303 	mla	r3, r4, r3, r3
 8004a7e:	eb03 0a02 	add.w	sl, r3, r2
 8004a82:	9b04      	ldr	r3, [sp, #16]
 8004a84:	9a07      	ldr	r2, [sp, #28]
 8004a86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004d60 <__kernel_rem_pio2+0x318>
 8004a8a:	eb03 0802 	add.w	r8, r3, r2
 8004a8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004a90:	1aa7      	subs	r7, r4, r2
 8004a92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004a96:	ae22      	add	r6, sp, #136	; 0x88
 8004a98:	2500      	movs	r5, #0
 8004a9a:	4545      	cmp	r5, r8
 8004a9c:	dd13      	ble.n	8004ac6 <__kernel_rem_pio2+0x7e>
 8004a9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004d60 <__kernel_rem_pio2+0x318>
 8004aa2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004aa6:	2600      	movs	r6, #0
 8004aa8:	9b04      	ldr	r3, [sp, #16]
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	dc32      	bgt.n	8004b14 <__kernel_rem_pio2+0xcc>
 8004aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	199d      	adds	r5, r3, r6
 8004ab6:	ab22      	add	r3, sp, #136	; 0x88
 8004ab8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004abc:	9306      	str	r3, [sp, #24]
 8004abe:	ec59 8b18 	vmov	r8, r9, d8
 8004ac2:	2700      	movs	r7, #0
 8004ac4:	e01f      	b.n	8004b06 <__kernel_rem_pio2+0xbe>
 8004ac6:	42ef      	cmn	r7, r5
 8004ac8:	d407      	bmi.n	8004ada <__kernel_rem_pio2+0x92>
 8004aca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ace:	f7fb fced 	bl	80004ac <__aeabi_i2d>
 8004ad2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	e7df      	b.n	8004a9a <__kernel_rem_pio2+0x52>
 8004ada:	ec51 0b18 	vmov	r0, r1, d8
 8004ade:	e7f8      	b.n	8004ad2 <__kernel_rem_pio2+0x8a>
 8004ae0:	9906      	ldr	r1, [sp, #24]
 8004ae2:	9d02      	ldr	r5, [sp, #8]
 8004ae4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004ae8:	9106      	str	r1, [sp, #24]
 8004aea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004aee:	9502      	str	r5, [sp, #8]
 8004af0:	f7fb fd46 	bl	8000580 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fb8a 	bl	8000214 <__adddf3>
 8004b00:	3701      	adds	r7, #1
 8004b02:	4680      	mov	r8, r0
 8004b04:	4689      	mov	r9, r1
 8004b06:	9b07      	ldr	r3, [sp, #28]
 8004b08:	429f      	cmp	r7, r3
 8004b0a:	dde9      	ble.n	8004ae0 <__kernel_rem_pio2+0x98>
 8004b0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7c9      	b.n	8004aa8 <__kernel_rem_pio2+0x60>
 8004b14:	9b04      	ldr	r3, [sp, #16]
 8004b16:	aa0e      	add	r2, sp, #56	; 0x38
 8004b18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004b20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004b24:	9c04      	ldr	r4, [sp, #16]
 8004b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b28:	ab9a      	add	r3, sp, #616	; 0x268
 8004b2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004b2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004b3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004b3e:	ab9a      	add	r3, sp, #616	; 0x268
 8004b40:	445b      	add	r3, fp
 8004b42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004b46:	2500      	movs	r5, #0
 8004b48:	1b63      	subs	r3, r4, r5
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	dc78      	bgt.n	8004c40 <__kernel_rem_pio2+0x1f8>
 8004b4e:	4650      	mov	r0, sl
 8004b50:	ec49 8b10 	vmov	d0, r8, r9
 8004b54:	f000 fc00 	bl	8005358 <scalbn>
 8004b58:	ec57 6b10 	vmov	r6, r7, d0
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004b62:	ee10 0a10 	vmov	r0, s0
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb fd0a 	bl	8000580 <__aeabi_dmul>
 8004b6c:	ec41 0b10 	vmov	d0, r0, r1
 8004b70:	f000 fb6e 	bl	8005250 <floor>
 8004b74:	2200      	movs	r2, #0
 8004b76:	ec51 0b10 	vmov	r0, r1, d0
 8004b7a:	4b7e      	ldr	r3, [pc, #504]	; (8004d74 <__kernel_rem_pio2+0x32c>)
 8004b7c:	f7fb fd00 	bl	8000580 <__aeabi_dmul>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4630      	mov	r0, r6
 8004b86:	4639      	mov	r1, r7
 8004b88:	f7fb fb42 	bl	8000210 <__aeabi_dsub>
 8004b8c:	460f      	mov	r7, r1
 8004b8e:	4606      	mov	r6, r0
 8004b90:	f7fb ff90 	bl	8000ab4 <__aeabi_d2iz>
 8004b94:	9006      	str	r0, [sp, #24]
 8004b96:	f7fb fc89 	bl	80004ac <__aeabi_i2d>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	f7fb fb35 	bl	8000210 <__aeabi_dsub>
 8004ba6:	f1ba 0f00 	cmp.w	sl, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	dd6c      	ble.n	8004c8a <__kernel_rem_pio2+0x242>
 8004bb0:	1e62      	subs	r2, r4, #1
 8004bb2:	ab0e      	add	r3, sp, #56	; 0x38
 8004bb4:	f1ca 0118 	rsb	r1, sl, #24
 8004bb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004bbc:	9d06      	ldr	r5, [sp, #24]
 8004bbe:	fa40 f301 	asr.w	r3, r0, r1
 8004bc2:	441d      	add	r5, r3
 8004bc4:	408b      	lsls	r3, r1
 8004bc6:	1ac0      	subs	r0, r0, r3
 8004bc8:	ab0e      	add	r3, sp, #56	; 0x38
 8004bca:	9506      	str	r5, [sp, #24]
 8004bcc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004bd0:	f1ca 0317 	rsb	r3, sl, #23
 8004bd4:	fa40 f303 	asr.w	r3, r0, r3
 8004bd8:	9302      	str	r3, [sp, #8]
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dd62      	ble.n	8004ca6 <__kernel_rem_pio2+0x25e>
 8004be0:	9b06      	ldr	r3, [sp, #24]
 8004be2:	2200      	movs	r2, #0
 8004be4:	3301      	adds	r3, #1
 8004be6:	9306      	str	r3, [sp, #24]
 8004be8:	4615      	mov	r5, r2
 8004bea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004bee:	4294      	cmp	r4, r2
 8004bf0:	f300 8095 	bgt.w	8004d1e <__kernel_rem_pio2+0x2d6>
 8004bf4:	f1ba 0f00 	cmp.w	sl, #0
 8004bf8:	dd07      	ble.n	8004c0a <__kernel_rem_pio2+0x1c2>
 8004bfa:	f1ba 0f01 	cmp.w	sl, #1
 8004bfe:	f000 80a2 	beq.w	8004d46 <__kernel_rem_pio2+0x2fe>
 8004c02:	f1ba 0f02 	cmp.w	sl, #2
 8004c06:	f000 80c1 	beq.w	8004d8c <__kernel_rem_pio2+0x344>
 8004c0a:	9b02      	ldr	r3, [sp, #8]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d14a      	bne.n	8004ca6 <__kernel_rem_pio2+0x25e>
 8004c10:	4632      	mov	r2, r6
 8004c12:	463b      	mov	r3, r7
 8004c14:	2000      	movs	r0, #0
 8004c16:	4958      	ldr	r1, [pc, #352]	; (8004d78 <__kernel_rem_pio2+0x330>)
 8004c18:	f7fb fafa 	bl	8000210 <__aeabi_dsub>
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	460f      	mov	r7, r1
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	d040      	beq.n	8004ca6 <__kernel_rem_pio2+0x25e>
 8004c24:	4650      	mov	r0, sl
 8004c26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004d68 <__kernel_rem_pio2+0x320>
 8004c2a:	f000 fb95 	bl	8005358 <scalbn>
 8004c2e:	4630      	mov	r0, r6
 8004c30:	4639      	mov	r1, r7
 8004c32:	ec53 2b10 	vmov	r2, r3, d0
 8004c36:	f7fb faeb 	bl	8000210 <__aeabi_dsub>
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	e032      	b.n	8004ca6 <__kernel_rem_pio2+0x25e>
 8004c40:	2200      	movs	r2, #0
 8004c42:	4b4e      	ldr	r3, [pc, #312]	; (8004d7c <__kernel_rem_pio2+0x334>)
 8004c44:	4640      	mov	r0, r8
 8004c46:	4649      	mov	r1, r9
 8004c48:	f7fb fc9a 	bl	8000580 <__aeabi_dmul>
 8004c4c:	f7fb ff32 	bl	8000ab4 <__aeabi_d2iz>
 8004c50:	f7fb fc2c 	bl	80004ac <__aeabi_i2d>
 8004c54:	2200      	movs	r2, #0
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <__kernel_rem_pio2+0x338>)
 8004c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c5c:	f7fb fc90 	bl	8000580 <__aeabi_dmul>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4640      	mov	r0, r8
 8004c66:	4649      	mov	r1, r9
 8004c68:	f7fb fad2 	bl	8000210 <__aeabi_dsub>
 8004c6c:	f7fb ff22 	bl	8000ab4 <__aeabi_d2iz>
 8004c70:	ab0e      	add	r3, sp, #56	; 0x38
 8004c72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004c76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7e:	f7fb fac9 	bl	8000214 <__adddf3>
 8004c82:	3501      	adds	r5, #1
 8004c84:	4680      	mov	r8, r0
 8004c86:	4689      	mov	r9, r1
 8004c88:	e75e      	b.n	8004b48 <__kernel_rem_pio2+0x100>
 8004c8a:	d105      	bne.n	8004c98 <__kernel_rem_pio2+0x250>
 8004c8c:	1e63      	subs	r3, r4, #1
 8004c8e:	aa0e      	add	r2, sp, #56	; 0x38
 8004c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c94:	15c3      	asrs	r3, r0, #23
 8004c96:	e79f      	b.n	8004bd8 <__kernel_rem_pio2+0x190>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	; (8004d84 <__kernel_rem_pio2+0x33c>)
 8004c9c:	f7fb fef6 	bl	8000a8c <__aeabi_dcmpge>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d139      	bne.n	8004d18 <__kernel_rem_pio2+0x2d0>
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb fecf 	bl	8000a50 <__aeabi_dcmpeq>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f000 80c7 	beq.w	8004e46 <__kernel_rem_pio2+0x3fe>
 8004cb8:	1e65      	subs	r5, r4, #1
 8004cba:	462b      	mov	r3, r5
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	9904      	ldr	r1, [sp, #16]
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	da6a      	bge.n	8004d9a <__kernel_rem_pio2+0x352>
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	f000 8088 	beq.w	8004dda <__kernel_rem_pio2+0x392>
 8004cca:	ab0e      	add	r3, sp, #56	; 0x38
 8004ccc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004cd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80b4 	beq.w	8004e42 <__kernel_rem_pio2+0x3fa>
 8004cda:	4650      	mov	r0, sl
 8004cdc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004d68 <__kernel_rem_pio2+0x320>
 8004ce0:	f000 fb3a 	bl	8005358 <scalbn>
 8004ce4:	00ec      	lsls	r4, r5, #3
 8004ce6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004ce8:	191e      	adds	r6, r3, r4
 8004cea:	ec59 8b10 	vmov	r8, r9, d0
 8004cee:	f106 0a08 	add.w	sl, r6, #8
 8004cf2:	462f      	mov	r7, r5
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	f280 80df 	bge.w	8004eb8 <__kernel_rem_pio2+0x470>
 8004cfa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004d60 <__kernel_rem_pio2+0x318>
 8004cfe:	f04f 0a00 	mov.w	sl, #0
 8004d02:	eba5 030a 	sub.w	r3, r5, sl
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f2c0 810a 	blt.w	8004f20 <__kernel_rem_pio2+0x4d8>
 8004d0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004d88 <__kernel_rem_pio2+0x340>
 8004d10:	ec59 8b18 	vmov	r8, r9, d8
 8004d14:	2700      	movs	r7, #0
 8004d16:	e0f5      	b.n	8004f04 <__kernel_rem_pio2+0x4bc>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	e760      	b.n	8004be0 <__kernel_rem_pio2+0x198>
 8004d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8004d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d24:	b94d      	cbnz	r5, 8004d3a <__kernel_rem_pio2+0x2f2>
 8004d26:	b12b      	cbz	r3, 8004d34 <__kernel_rem_pio2+0x2ec>
 8004d28:	a80e      	add	r0, sp, #56	; 0x38
 8004d2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004d2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004d32:	2301      	movs	r3, #1
 8004d34:	3201      	adds	r2, #1
 8004d36:	461d      	mov	r5, r3
 8004d38:	e759      	b.n	8004bee <__kernel_rem_pio2+0x1a6>
 8004d3a:	a80e      	add	r0, sp, #56	; 0x38
 8004d3c:	1acb      	subs	r3, r1, r3
 8004d3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004d42:	462b      	mov	r3, r5
 8004d44:	e7f6      	b.n	8004d34 <__kernel_rem_pio2+0x2ec>
 8004d46:	1e62      	subs	r2, r4, #1
 8004d48:	ab0e      	add	r3, sp, #56	; 0x38
 8004d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d52:	a90e      	add	r1, sp, #56	; 0x38
 8004d54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004d58:	e757      	b.n	8004c0a <__kernel_rem_pio2+0x1c2>
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w
	...
 8004d6c:	3ff00000 	.word	0x3ff00000
 8004d70:	080056b8 	.word	0x080056b8
 8004d74:	40200000 	.word	0x40200000
 8004d78:	3ff00000 	.word	0x3ff00000
 8004d7c:	3e700000 	.word	0x3e700000
 8004d80:	41700000 	.word	0x41700000
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	08005678 	.word	0x08005678
 8004d8c:	1e62      	subs	r2, r4, #1
 8004d8e:	ab0e      	add	r3, sp, #56	; 0x38
 8004d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004d98:	e7db      	b.n	8004d52 <__kernel_rem_pio2+0x30a>
 8004d9a:	a90e      	add	r1, sp, #56	; 0x38
 8004d9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	430a      	orrs	r2, r1
 8004da4:	e78b      	b.n	8004cbe <__kernel_rem_pio2+0x276>
 8004da6:	3301      	adds	r3, #1
 8004da8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004dac:	2900      	cmp	r1, #0
 8004dae:	d0fa      	beq.n	8004da6 <__kernel_rem_pio2+0x35e>
 8004db0:	9a08      	ldr	r2, [sp, #32]
 8004db2:	4422      	add	r2, r4
 8004db4:	00d2      	lsls	r2, r2, #3
 8004db6:	a922      	add	r1, sp, #136	; 0x88
 8004db8:	18e3      	adds	r3, r4, r3
 8004dba:	9206      	str	r2, [sp, #24]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	f10b 0108 	add.w	r1, fp, #8
 8004dc4:	f102 0308 	add.w	r3, r2, #8
 8004dc8:	1c66      	adds	r6, r4, #1
 8004dca:	910a      	str	r1, [sp, #40]	; 0x28
 8004dcc:	2500      	movs	r5, #0
 8004dce:	930d      	str	r3, [sp, #52]	; 0x34
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	42b3      	cmp	r3, r6
 8004dd4:	da04      	bge.n	8004de0 <__kernel_rem_pio2+0x398>
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	e6a6      	b.n	8004b28 <__kernel_rem_pio2+0xe0>
 8004dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e7e3      	b.n	8004da8 <__kernel_rem_pio2+0x360>
 8004de0:	9b06      	ldr	r3, [sp, #24]
 8004de2:	18ef      	adds	r7, r5, r3
 8004de4:	ab22      	add	r3, sp, #136	; 0x88
 8004de6:	441f      	add	r7, r3
 8004de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004dee:	f7fb fb5d 	bl	80004ac <__aeabi_i2d>
 8004df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df4:	461c      	mov	r4, r3
 8004df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df8:	e9c7 0100 	strd	r0, r1, [r7]
 8004dfc:	eb03 0b05 	add.w	fp, r3, r5
 8004e00:	2700      	movs	r7, #0
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	f04f 0900 	mov.w	r9, #0
 8004e0a:	9b07      	ldr	r3, [sp, #28]
 8004e0c:	429f      	cmp	r7, r3
 8004e0e:	dd08      	ble.n	8004e22 <__kernel_rem_pio2+0x3da>
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	aa72      	add	r2, sp, #456	; 0x1c8
 8004e14:	18eb      	adds	r3, r5, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	3508      	adds	r5, #8
 8004e20:	e7d6      	b.n	8004dd0 <__kernel_rem_pio2+0x388>
 8004e22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004e26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004e2a:	f7fb fba9 	bl	8000580 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4640      	mov	r0, r8
 8004e34:	4649      	mov	r1, r9
 8004e36:	f7fb f9ed 	bl	8000214 <__adddf3>
 8004e3a:	3701      	adds	r7, #1
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	4689      	mov	r9, r1
 8004e40:	e7e3      	b.n	8004e0a <__kernel_rem_pio2+0x3c2>
 8004e42:	3d01      	subs	r5, #1
 8004e44:	e741      	b.n	8004cca <__kernel_rem_pio2+0x282>
 8004e46:	f1ca 0000 	rsb	r0, sl, #0
 8004e4a:	ec47 6b10 	vmov	d0, r6, r7
 8004e4e:	f000 fa83 	bl	8005358 <scalbn>
 8004e52:	ec57 6b10 	vmov	r6, r7, d0
 8004e56:	2200      	movs	r2, #0
 8004e58:	4b99      	ldr	r3, [pc, #612]	; (80050c0 <__kernel_rem_pio2+0x678>)
 8004e5a:	ee10 0a10 	vmov	r0, s0
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fe14 	bl	8000a8c <__aeabi_dcmpge>
 8004e64:	b1f8      	cbz	r0, 8004ea6 <__kernel_rem_pio2+0x45e>
 8004e66:	2200      	movs	r2, #0
 8004e68:	4b96      	ldr	r3, [pc, #600]	; (80050c4 <__kernel_rem_pio2+0x67c>)
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	f7fb fb87 	bl	8000580 <__aeabi_dmul>
 8004e72:	f7fb fe1f 	bl	8000ab4 <__aeabi_d2iz>
 8004e76:	4680      	mov	r8, r0
 8004e78:	f7fb fb18 	bl	80004ac <__aeabi_i2d>
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4b90      	ldr	r3, [pc, #576]	; (80050c0 <__kernel_rem_pio2+0x678>)
 8004e80:	f7fb fb7e 	bl	8000580 <__aeabi_dmul>
 8004e84:	460b      	mov	r3, r1
 8004e86:	4602      	mov	r2, r0
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7fb f9c0 	bl	8000210 <__aeabi_dsub>
 8004e90:	f7fb fe10 	bl	8000ab4 <__aeabi_d2iz>
 8004e94:	1c65      	adds	r5, r4, #1
 8004e96:	ab0e      	add	r3, sp, #56	; 0x38
 8004e98:	f10a 0a18 	add.w	sl, sl, #24
 8004e9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004ea0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004ea4:	e719      	b.n	8004cda <__kernel_rem_pio2+0x292>
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	f7fb fe03 	bl	8000ab4 <__aeabi_d2iz>
 8004eae:	ab0e      	add	r3, sp, #56	; 0x38
 8004eb0:	4625      	mov	r5, r4
 8004eb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004eb6:	e710      	b.n	8004cda <__kernel_rem_pio2+0x292>
 8004eb8:	ab0e      	add	r3, sp, #56	; 0x38
 8004eba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004ebe:	f7fb faf5 	bl	80004ac <__aeabi_i2d>
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	f7fb fb5b 	bl	8000580 <__aeabi_dmul>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004ed0:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <__kernel_rem_pio2+0x67c>)
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb fb53 	bl	8000580 <__aeabi_dmul>
 8004eda:	3f01      	subs	r7, #1
 8004edc:	4680      	mov	r8, r0
 8004ede:	4689      	mov	r9, r1
 8004ee0:	e708      	b.n	8004cf4 <__kernel_rem_pio2+0x2ac>
 8004ee2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8004eee:	f7fb fb47 	bl	8000580 <__aeabi_dmul>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4649      	mov	r1, r9
 8004efa:	f7fb f98b 	bl	8000214 <__adddf3>
 8004efe:	3701      	adds	r7, #1
 8004f00:	4680      	mov	r8, r0
 8004f02:	4689      	mov	r9, r1
 8004f04:	9b04      	ldr	r3, [sp, #16]
 8004f06:	429f      	cmp	r7, r3
 8004f08:	dc01      	bgt.n	8004f0e <__kernel_rem_pio2+0x4c6>
 8004f0a:	45ba      	cmp	sl, r7
 8004f0c:	dae9      	bge.n	8004ee2 <__kernel_rem_pio2+0x49a>
 8004f0e:	ab4a      	add	r3, sp, #296	; 0x128
 8004f10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f14:	e9c3 8900 	strd	r8, r9, [r3]
 8004f18:	f10a 0a01 	add.w	sl, sl, #1
 8004f1c:	3e08      	subs	r6, #8
 8004f1e:	e6f0      	b.n	8004d02 <__kernel_rem_pio2+0x2ba>
 8004f20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d85b      	bhi.n	8004fde <__kernel_rem_pio2+0x596>
 8004f26:	e8df f003 	tbb	[pc, r3]
 8004f2a:	264a      	.short	0x264a
 8004f2c:	0226      	.short	0x0226
 8004f2e:	ab9a      	add	r3, sp, #616	; 0x268
 8004f30:	441c      	add	r4, r3
 8004f32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004f36:	46a2      	mov	sl, r4
 8004f38:	46ab      	mov	fp, r5
 8004f3a:	f1bb 0f00 	cmp.w	fp, #0
 8004f3e:	dc6c      	bgt.n	800501a <__kernel_rem_pio2+0x5d2>
 8004f40:	46a2      	mov	sl, r4
 8004f42:	46ab      	mov	fp, r5
 8004f44:	f1bb 0f01 	cmp.w	fp, #1
 8004f48:	f300 8086 	bgt.w	8005058 <__kernel_rem_pio2+0x610>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2d01      	cmp	r5, #1
 8004f52:	f300 80a0 	bgt.w	8005096 <__kernel_rem_pio2+0x64e>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004f5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 809e 	bne.w	80050a2 <__kernel_rem_pio2+0x65a>
 8004f66:	9b01      	ldr	r3, [sp, #4]
 8004f68:	e9c3 7800 	strd	r7, r8, [r3]
 8004f6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004f70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004f74:	e033      	b.n	8004fde <__kernel_rem_pio2+0x596>
 8004f76:	3408      	adds	r4, #8
 8004f78:	ab4a      	add	r3, sp, #296	; 0x128
 8004f7a:	441c      	add	r4, r3
 8004f7c:	462e      	mov	r6, r5
 8004f7e:	2000      	movs	r0, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	da3a      	bge.n	8004ffc <__kernel_rem_pio2+0x5b4>
 8004f86:	9b02      	ldr	r3, [sp, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03d      	beq.n	8005008 <__kernel_rem_pio2+0x5c0>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f92:	9c01      	ldr	r4, [sp, #4]
 8004f94:	e9c4 2300 	strd	r2, r3, [r4]
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004fa0:	f7fb f936 	bl	8000210 <__aeabi_dsub>
 8004fa4:	ae4c      	add	r6, sp, #304	; 0x130
 8004fa6:	2401      	movs	r4, #1
 8004fa8:	42a5      	cmp	r5, r4
 8004faa:	da30      	bge.n	800500e <__kernel_rem_pio2+0x5c6>
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	b113      	cbz	r3, 8004fb6 <__kernel_rem_pio2+0x56e>
 8004fb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	9b01      	ldr	r3, [sp, #4]
 8004fb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004fbc:	e00f      	b.n	8004fde <__kernel_rem_pio2+0x596>
 8004fbe:	ab9a      	add	r3, sp, #616	; 0x268
 8004fc0:	441c      	add	r4, r3
 8004fc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	da10      	bge.n	8004ff0 <__kernel_rem_pio2+0x5a8>
 8004fce:	9b02      	ldr	r3, [sp, #8]
 8004fd0:	b113      	cbz	r3, 8004fd8 <__kernel_rem_pio2+0x590>
 8004fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	e9c3 0100 	strd	r0, r1, [r3]
 8004fde:	9b06      	ldr	r3, [sp, #24]
 8004fe0:	f003 0007 	and.w	r0, r3, #7
 8004fe4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004fe8:	ecbd 8b02 	vpop	{d8}
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ff4:	f7fb f90e 	bl	8000214 <__adddf3>
 8004ff8:	3d01      	subs	r5, #1
 8004ffa:	e7e6      	b.n	8004fca <__kernel_rem_pio2+0x582>
 8004ffc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005000:	f7fb f908 	bl	8000214 <__adddf3>
 8005004:	3e01      	subs	r6, #1
 8005006:	e7bc      	b.n	8004f82 <__kernel_rem_pio2+0x53a>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e7c1      	b.n	8004f92 <__kernel_rem_pio2+0x54a>
 800500e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005012:	f7fb f8ff 	bl	8000214 <__adddf3>
 8005016:	3401      	adds	r4, #1
 8005018:	e7c6      	b.n	8004fa8 <__kernel_rem_pio2+0x560>
 800501a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800501e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005022:	4640      	mov	r0, r8
 8005024:	ec53 2b17 	vmov	r2, r3, d7
 8005028:	4649      	mov	r1, r9
 800502a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800502e:	f7fb f8f1 	bl	8000214 <__adddf3>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	4640      	mov	r0, r8
 800503c:	4649      	mov	r1, r9
 800503e:	f7fb f8e7 	bl	8000210 <__aeabi_dsub>
 8005042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005046:	f7fb f8e5 	bl	8000214 <__adddf3>
 800504a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800504e:	e9ca 0100 	strd	r0, r1, [sl]
 8005052:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005056:	e770      	b.n	8004f3a <__kernel_rem_pio2+0x4f2>
 8005058:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800505c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005060:	4630      	mov	r0, r6
 8005062:	ec53 2b17 	vmov	r2, r3, d7
 8005066:	4639      	mov	r1, r7
 8005068:	ed8d 7b04 	vstr	d7, [sp, #16]
 800506c:	f7fb f8d2 	bl	8000214 <__adddf3>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4680      	mov	r8, r0
 8005076:	4689      	mov	r9, r1
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb f8c8 	bl	8000210 <__aeabi_dsub>
 8005080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005084:	f7fb f8c6 	bl	8000214 <__adddf3>
 8005088:	f10b 3bff 	add.w	fp, fp, #4294967295
 800508c:	e9ca 0100 	strd	r0, r1, [sl]
 8005090:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005094:	e756      	b.n	8004f44 <__kernel_rem_pio2+0x4fc>
 8005096:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800509a:	f7fb f8bb 	bl	8000214 <__adddf3>
 800509e:	3d01      	subs	r5, #1
 80050a0:	e756      	b.n	8004f50 <__kernel_rem_pio2+0x508>
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	9a01      	ldr	r2, [sp, #4]
 80050a6:	601f      	str	r7, [r3, #0]
 80050a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80050ac:	605c      	str	r4, [r3, #4]
 80050ae:	609d      	str	r5, [r3, #8]
 80050b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050b4:	60d3      	str	r3, [r2, #12]
 80050b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050ba:	6110      	str	r0, [r2, #16]
 80050bc:	6153      	str	r3, [r2, #20]
 80050be:	e78e      	b.n	8004fde <__kernel_rem_pio2+0x596>
 80050c0:	41700000 	.word	0x41700000
 80050c4:	3e700000 	.word	0x3e700000

080050c8 <__kernel_sin>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	ec55 4b10 	vmov	r4, r5, d0
 80050d0:	b085      	sub	sp, #20
 80050d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80050d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80050da:	ed8d 1b00 	vstr	d1, [sp]
 80050de:	9002      	str	r0, [sp, #8]
 80050e0:	da06      	bge.n	80050f0 <__kernel_sin+0x28>
 80050e2:	ee10 0a10 	vmov	r0, s0
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb fce4 	bl	8000ab4 <__aeabi_d2iz>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d051      	beq.n	8005194 <__kernel_sin+0xcc>
 80050f0:	4622      	mov	r2, r4
 80050f2:	462b      	mov	r3, r5
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb fa42 	bl	8000580 <__aeabi_dmul>
 80050fc:	4682      	mov	sl, r0
 80050fe:	468b      	mov	fp, r1
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb fa3a 	bl	8000580 <__aeabi_dmul>
 800510c:	a341      	add	r3, pc, #260	; (adr r3, 8005214 <__kernel_sin+0x14c>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	4680      	mov	r8, r0
 8005114:	4689      	mov	r9, r1
 8005116:	4650      	mov	r0, sl
 8005118:	4659      	mov	r1, fp
 800511a:	f7fb fa31 	bl	8000580 <__aeabi_dmul>
 800511e:	a33f      	add	r3, pc, #252	; (adr r3, 800521c <__kernel_sin+0x154>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb f874 	bl	8000210 <__aeabi_dsub>
 8005128:	4652      	mov	r2, sl
 800512a:	465b      	mov	r3, fp
 800512c:	f7fb fa28 	bl	8000580 <__aeabi_dmul>
 8005130:	a33c      	add	r3, pc, #240	; (adr r3, 8005224 <__kernel_sin+0x15c>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f86d 	bl	8000214 <__adddf3>
 800513a:	4652      	mov	r2, sl
 800513c:	465b      	mov	r3, fp
 800513e:	f7fb fa1f 	bl	8000580 <__aeabi_dmul>
 8005142:	a33a      	add	r3, pc, #232	; (adr r3, 800522c <__kernel_sin+0x164>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f862 	bl	8000210 <__aeabi_dsub>
 800514c:	4652      	mov	r2, sl
 800514e:	465b      	mov	r3, fp
 8005150:	f7fb fa16 	bl	8000580 <__aeabi_dmul>
 8005154:	a337      	add	r3, pc, #220	; (adr r3, 8005234 <__kernel_sin+0x16c>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f85b 	bl	8000214 <__adddf3>
 800515e:	9b02      	ldr	r3, [sp, #8]
 8005160:	4606      	mov	r6, r0
 8005162:	460f      	mov	r7, r1
 8005164:	b9db      	cbnz	r3, 800519e <__kernel_sin+0xd6>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4650      	mov	r0, sl
 800516c:	4659      	mov	r1, fp
 800516e:	f7fb fa07 	bl	8000580 <__aeabi_dmul>
 8005172:	a325      	add	r3, pc, #148	; (adr r3, 8005208 <__kernel_sin+0x140>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb f84a 	bl	8000210 <__aeabi_dsub>
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	f7fb f9fe 	bl	8000580 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	f7fb f842 	bl	8000214 <__adddf3>
 8005190:	4604      	mov	r4, r0
 8005192:	460d      	mov	r5, r1
 8005194:	ec45 4b10 	vmov	d0, r4, r5
 8005198:	b005      	add	sp, #20
 800519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519e:	2200      	movs	r2, #0
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <__kernel_sin+0x148>)
 80051a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a6:	f7fb f9eb 	bl	8000580 <__aeabi_dmul>
 80051aa:	4632      	mov	r2, r6
 80051ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b0:	463b      	mov	r3, r7
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb f9e3 	bl	8000580 <__aeabi_dmul>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	f7fb f825 	bl	8000210 <__aeabi_dsub>
 80051c6:	4652      	mov	r2, sl
 80051c8:	465b      	mov	r3, fp
 80051ca:	f7fb f9d9 	bl	8000580 <__aeabi_dmul>
 80051ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051d2:	f7fb f81d 	bl	8000210 <__aeabi_dsub>
 80051d6:	a30c      	add	r3, pc, #48	; (adr r3, 8005208 <__kernel_sin+0x140>)
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	4606      	mov	r6, r0
 80051de:	460f      	mov	r7, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb f9cc 	bl	8000580 <__aeabi_dmul>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb f810 	bl	8000214 <__adddf3>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fb f808 	bl	8000210 <__aeabi_dsub>
 8005200:	e7c6      	b.n	8005190 <__kernel_sin+0xc8>
 8005202:	bf00      	nop
 8005204:	f3af 8000 	nop.w
 8005208:	55555549 	.word	0x55555549
 800520c:	3fc55555 	.word	0x3fc55555
 8005210:	3fe00000 	.word	0x3fe00000
 8005214:	5acfd57c 	.word	0x5acfd57c
 8005218:	3de5d93a 	.word	0x3de5d93a
 800521c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005220:	3e5ae5e6 	.word	0x3e5ae5e6
 8005224:	57b1fe7d 	.word	0x57b1fe7d
 8005228:	3ec71de3 	.word	0x3ec71de3
 800522c:	19c161d5 	.word	0x19c161d5
 8005230:	3f2a01a0 	.word	0x3f2a01a0
 8005234:	1110f8a6 	.word	0x1110f8a6
 8005238:	3f811111 	.word	0x3f811111

0800523c <fabs>:
 800523c:	ec51 0b10 	vmov	r0, r1, d0
 8005240:	ee10 2a10 	vmov	r2, s0
 8005244:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005248:	ec43 2b10 	vmov	d0, r2, r3
 800524c:	4770      	bx	lr
	...

08005250 <floor>:
 8005250:	ec51 0b10 	vmov	r0, r1, d0
 8005254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800525c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005260:	2e13      	cmp	r6, #19
 8005262:	460c      	mov	r4, r1
 8005264:	ee10 5a10 	vmov	r5, s0
 8005268:	4680      	mov	r8, r0
 800526a:	dc34      	bgt.n	80052d6 <floor+0x86>
 800526c:	2e00      	cmp	r6, #0
 800526e:	da16      	bge.n	800529e <floor+0x4e>
 8005270:	a335      	add	r3, pc, #212	; (adr r3, 8005348 <floor+0xf8>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f7fa ffcd 	bl	8000214 <__adddf3>
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	f7fb fc0f 	bl	8000aa0 <__aeabi_dcmpgt>
 8005282:	b148      	cbz	r0, 8005298 <floor+0x48>
 8005284:	2c00      	cmp	r4, #0
 8005286:	da59      	bge.n	800533c <floor+0xec>
 8005288:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800528c:	4a30      	ldr	r2, [pc, #192]	; (8005350 <floor+0x100>)
 800528e:	432b      	orrs	r3, r5
 8005290:	2500      	movs	r5, #0
 8005292:	42ab      	cmp	r3, r5
 8005294:	bf18      	it	ne
 8005296:	4614      	movne	r4, r2
 8005298:	4621      	mov	r1, r4
 800529a:	4628      	mov	r0, r5
 800529c:	e025      	b.n	80052ea <floor+0x9a>
 800529e:	4f2d      	ldr	r7, [pc, #180]	; (8005354 <floor+0x104>)
 80052a0:	4137      	asrs	r7, r6
 80052a2:	ea01 0307 	and.w	r3, r1, r7
 80052a6:	4303      	orrs	r3, r0
 80052a8:	d01f      	beq.n	80052ea <floor+0x9a>
 80052aa:	a327      	add	r3, pc, #156	; (adr r3, 8005348 <floor+0xf8>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa ffb0 	bl	8000214 <__adddf3>
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	f7fb fbf2 	bl	8000aa0 <__aeabi_dcmpgt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0eb      	beq.n	8005298 <floor+0x48>
 80052c0:	2c00      	cmp	r4, #0
 80052c2:	bfbe      	ittt	lt
 80052c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80052c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80052cc:	19a4      	addlt	r4, r4, r6
 80052ce:	ea24 0407 	bic.w	r4, r4, r7
 80052d2:	2500      	movs	r5, #0
 80052d4:	e7e0      	b.n	8005298 <floor+0x48>
 80052d6:	2e33      	cmp	r6, #51	; 0x33
 80052d8:	dd0b      	ble.n	80052f2 <floor+0xa2>
 80052da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80052de:	d104      	bne.n	80052ea <floor+0x9a>
 80052e0:	ee10 2a10 	vmov	r2, s0
 80052e4:	460b      	mov	r3, r1
 80052e6:	f7fa ff95 	bl	8000214 <__adddf3>
 80052ea:	ec41 0b10 	vmov	d0, r0, r1
 80052ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	fa23 f707 	lsr.w	r7, r3, r7
 80052fe:	4207      	tst	r7, r0
 8005300:	d0f3      	beq.n	80052ea <floor+0x9a>
 8005302:	a311      	add	r3, pc, #68	; (adr r3, 8005348 <floor+0xf8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ff84 	bl	8000214 <__adddf3>
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	f7fb fbc6 	bl	8000aa0 <__aeabi_dcmpgt>
 8005314:	2800      	cmp	r0, #0
 8005316:	d0bf      	beq.n	8005298 <floor+0x48>
 8005318:	2c00      	cmp	r4, #0
 800531a:	da02      	bge.n	8005322 <floor+0xd2>
 800531c:	2e14      	cmp	r6, #20
 800531e:	d103      	bne.n	8005328 <floor+0xd8>
 8005320:	3401      	adds	r4, #1
 8005322:	ea25 0507 	bic.w	r5, r5, r7
 8005326:	e7b7      	b.n	8005298 <floor+0x48>
 8005328:	2301      	movs	r3, #1
 800532a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800532e:	fa03 f606 	lsl.w	r6, r3, r6
 8005332:	4435      	add	r5, r6
 8005334:	4545      	cmp	r5, r8
 8005336:	bf38      	it	cc
 8005338:	18e4      	addcc	r4, r4, r3
 800533a:	e7f2      	b.n	8005322 <floor+0xd2>
 800533c:	2500      	movs	r5, #0
 800533e:	462c      	mov	r4, r5
 8005340:	e7aa      	b.n	8005298 <floor+0x48>
 8005342:	bf00      	nop
 8005344:	f3af 8000 	nop.w
 8005348:	8800759c 	.word	0x8800759c
 800534c:	7e37e43c 	.word	0x7e37e43c
 8005350:	bff00000 	.word	0xbff00000
 8005354:	000fffff 	.word	0x000fffff

08005358 <scalbn>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	ec55 4b10 	vmov	r4, r5, d0
 800535e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005362:	4606      	mov	r6, r0
 8005364:	462b      	mov	r3, r5
 8005366:	b9aa      	cbnz	r2, 8005394 <scalbn+0x3c>
 8005368:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800536c:	4323      	orrs	r3, r4
 800536e:	d03b      	beq.n	80053e8 <scalbn+0x90>
 8005370:	4b31      	ldr	r3, [pc, #196]	; (8005438 <scalbn+0xe0>)
 8005372:	4629      	mov	r1, r5
 8005374:	2200      	movs	r2, #0
 8005376:	ee10 0a10 	vmov	r0, s0
 800537a:	f7fb f901 	bl	8000580 <__aeabi_dmul>
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <scalbn+0xe4>)
 8005380:	429e      	cmp	r6, r3
 8005382:	4604      	mov	r4, r0
 8005384:	460d      	mov	r5, r1
 8005386:	da12      	bge.n	80053ae <scalbn+0x56>
 8005388:	a327      	add	r3, pc, #156	; (adr r3, 8005428 <scalbn+0xd0>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb f8f7 	bl	8000580 <__aeabi_dmul>
 8005392:	e009      	b.n	80053a8 <scalbn+0x50>
 8005394:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005398:	428a      	cmp	r2, r1
 800539a:	d10c      	bne.n	80053b6 <scalbn+0x5e>
 800539c:	ee10 2a10 	vmov	r2, s0
 80053a0:	4620      	mov	r0, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	f7fa ff36 	bl	8000214 <__adddf3>
 80053a8:	4604      	mov	r4, r0
 80053aa:	460d      	mov	r5, r1
 80053ac:	e01c      	b.n	80053e8 <scalbn+0x90>
 80053ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053b2:	460b      	mov	r3, r1
 80053b4:	3a36      	subs	r2, #54	; 0x36
 80053b6:	4432      	add	r2, r6
 80053b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80053bc:	428a      	cmp	r2, r1
 80053be:	dd0b      	ble.n	80053d8 <scalbn+0x80>
 80053c0:	ec45 4b11 	vmov	d1, r4, r5
 80053c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005430 <scalbn+0xd8>
 80053c8:	f000 f83c 	bl	8005444 <copysign>
 80053cc:	a318      	add	r3, pc, #96	; (adr r3, 8005430 <scalbn+0xd8>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	ec51 0b10 	vmov	r0, r1, d0
 80053d6:	e7da      	b.n	800538e <scalbn+0x36>
 80053d8:	2a00      	cmp	r2, #0
 80053da:	dd08      	ble.n	80053ee <scalbn+0x96>
 80053dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053e8:	ec45 4b10 	vmov	d0, r4, r5
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
 80053ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80053f2:	da0d      	bge.n	8005410 <scalbn+0xb8>
 80053f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80053f8:	429e      	cmp	r6, r3
 80053fa:	ec45 4b11 	vmov	d1, r4, r5
 80053fe:	dce1      	bgt.n	80053c4 <scalbn+0x6c>
 8005400:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005428 <scalbn+0xd0>
 8005404:	f000 f81e 	bl	8005444 <copysign>
 8005408:	a307      	add	r3, pc, #28	; (adr r3, 8005428 <scalbn+0xd0>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e7e0      	b.n	80053d2 <scalbn+0x7a>
 8005410:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005414:	3236      	adds	r2, #54	; 0x36
 8005416:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800541a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	2200      	movs	r2, #0
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <scalbn+0xe8>)
 8005426:	e7b2      	b.n	800538e <scalbn+0x36>
 8005428:	c2f8f359 	.word	0xc2f8f359
 800542c:	01a56e1f 	.word	0x01a56e1f
 8005430:	8800759c 	.word	0x8800759c
 8005434:	7e37e43c 	.word	0x7e37e43c
 8005438:	43500000 	.word	0x43500000
 800543c:	ffff3cb0 	.word	0xffff3cb0
 8005440:	3c900000 	.word	0x3c900000

08005444 <copysign>:
 8005444:	ec51 0b10 	vmov	r0, r1, d0
 8005448:	ee11 0a90 	vmov	r0, s3
 800544c:	ee10 2a10 	vmov	r2, s0
 8005450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005454:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005458:	ea41 0300 	orr.w	r3, r1, r0
 800545c:	ec43 2b10 	vmov	d0, r2, r3
 8005460:	4770      	bx	lr
	...

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4e0d      	ldr	r6, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1ba4      	subs	r4, r4, r6
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2500      	movs	r5, #0
 8005470:	42a5      	cmp	r5, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4e0b      	ldr	r6, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 f820 	bl	80054bc <_init>
 800547c:	1ba4      	subs	r4, r4, r6
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2500      	movs	r5, #0
 8005482:	42a5      	cmp	r5, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800548c:	4798      	blx	r3
 800548e:	3501      	adds	r5, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005496:	4798      	blx	r3
 8005498:	3501      	adds	r5, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	080056d0 	.word	0x080056d0
 80054a0:	080056d0 	.word	0x080056d0
 80054a4:	080056d0 	.word	0x080056d0
 80054a8:	080056d4 	.word	0x080056d4

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <_init>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr

080054c8 <_fini>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr
